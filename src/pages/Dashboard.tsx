import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useAuth } from "@/hooks/use-auth";
import { api } from "@/convex/_generated/api";
import { useMutation, useQuery } from "convex/react";
import { motion } from "framer-motion";
import { 
  CloudRain, 
  Droplets, 
  Leaf, 
  MapPin, 
  Mic, 
  MicOff, 
  TrendingUp, 
  Wheat,
  Globe,
  Volume2
} from "lucide-react";
import { Loader2 } from "lucide-react";
import { useEffect, useState } from "react";
import { toast } from "sonner";
/* removed unused Tabs imports */
import WeatherCard from "./dashboard/WeatherCard";
import MarketPricesCard from "./dashboard/MarketPricesCard";
import RecommendationsList from "./dashboard/RecommendationsList";

function deriveWeatherFromLocation(loc: string): { temperature: number; humidity: number; rainfall: number; forecast: string; localTime: string } {
  // Fallback if API fails; keep lightweight variability by hash
  let hash = 0;
  for (let i = 0; i < loc.length; i++) hash = (hash * 31 + loc.charCodeAt(i)) >>> 0;
  const now = new Date();
  const temp = 18 + (hash % 17);
  const humidity = 40 + (hash % 51);
  const rainfall = hash % 25;
  const forecasts = [
    "Partly cloudy with light breeze",
    "Sunny intervals with gentle winds",
    "Scattered showers possible",
    "Humid and overcast",
    "Clear skies and dry",
    "Thunderstorms likely in the evening",
  ];
  const forecast = forecasts[hash % forecasts.length];
  return { temperature: temp, humidity, rainfall, forecast, localTime: now.toLocaleString() };
}

async function fetchWeather(lat: number, lon: number) {
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,relative_humidity_2m,precipitation&timezone=auto`;
  const res = await fetch(url);
  if (!res.ok) throw new Error("weather");
  const data = await res.json();
  const temperature = Math.round(data?.current?.temperature_2m ?? 0);
  const humidity = Math.round(data?.current?.relative_humidity_2m ?? 0);
  const rainfall = Math.round((data?.current?.precipitation ?? 0) * 10) / 10;
  const forecast = rainfall > 0 ? "Rain likely" : temperature > 32 ? "Hot and dry" : "Partly cloudy";
  return { temperature, humidity, rainfall, forecast, localTime: new Date().toLocaleString() };
}

const cropEmojis: Record<string, string> = {
  Wheat: "ЁЯМ╛",
  "Pulses (Lentils)": "ЁЯлШ",
  Soybean: "ЁЯлШ",
  Maize: "ЁЯМ╜",
  Rice: "ЁЯМ┐",
  Cotton: "ЁЯз╡",
  Sugarcane: "ЁЯНм",
  Potato: "ЁЯеФ",
  Groundnut: "ЁЯеЬ",
};

// ADD: localized crop name map
const cropNameTranslations: Record<string, Record<string, string>> = {
  en: {
    Wheat: "Wheat",
    Rice: "Rice",
    Maize: "Maize",
    Soybean: "Soybean",
    "Pulses (Lentils)": "Pulses (Lentils)",
    Cotton: "Cotton",
    Sugarcane: "Sugarcane",
    Potato: "Potato",
    Groundnut: "Groundnut",
  },
  hi: {
    Wheat: "рдЧреЗрд╣реВрдБ",
    Rice: "рдЪрд╛рд╡рд▓",
    Maize: "рдордХреНрдХрд╛",
    Soybean: "рд╕реЛрдпрд╛рдмреАрди",
    "Pulses (Lentils)": "рджрд╛рд▓реЗрдВ",
    Cotton: "рдХрдкрд╛рд╕",
    Sugarcane: "рдЧрдиреНрдирд╛",
    Potato: "рдЖрд▓реВ",
    Groundnut: "рдореВрдВрдЧрдлрд▓реА",
  },
  ta: {
    Wheat: "роХрпЛродрпБроорпИ",
    Rice: "роЕро░ро┐роЪро┐",
    Maize: "роЪрпЛро│роорпН",
    Soybean: "роЪрпЛропро╛",
    "Pulses (Lentils)": "рокро░рпБрокрпНрокрпБ",
    Cotton: "рокро░рпБродрпНродро┐",
    Sugarcane: "роХро░рпБроорпНрокрпБ",
    Potato: "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ",
    Groundnut: "ро╡рпЗро░рпНроХрпНроХроЯро▓рпИ",
  },
  bn: {
    Wheat: "ржЧржо",
    Rice: "ржЪрж╛рж▓",
    Maize: "ржнрзБржЯрзНржЯрж╛",
    Soybean: "рж╕ржпрж╝рж╛ржмрж┐ржи",
    "Pulses (Lentils)": "ржбрж╛рж▓",
    Cotton: "рж╕рзБрждрж┐ржмрж╕рзНрждрзНрж░",
    Sugarcane: "ржЖржЦ",
    Potato: "ржЖрж▓рзБ",
    Groundnut: "ржЪрж┐ржирж╛ржмрж╛ржжрж╛ржо",
  },
  ur: {
    Wheat: "┌п┘Ж╪п┘Е",
    Rice: "┌Ж╪з┘И┘Д",
    Maize: "┘Е┌й╪ж█М",
    Soybean: "╪│┘И█М╪з ╪и█М┘Ж",
    "Pulses (Lentils)": "╪п╪з┘Д█М┌║",
    Cotton: "╪▒┘И╪ж█М",
    Sugarcane: "┌п┘Ж╪з",
    Potato: "╪в┘Д┘И",
    Groundnut: "┘Е┘И┘Ж┌п ┘╛┌╛┘Д█М",
  },
  kn: {
    Wheat: "р▓Чр│Лр▓жр▓┐",
    Rice: "р▓Ер▓Хр│Нр▓Хр▓┐",
    Maize: "р▓Ьр│Лр▓│",
    Soybean: "р▓╕р│Лр▓пр▓╛р▓мр▓┐р▓ир│Н",
    "Pulses (Lentils)": "р▓мр│Зр▓│р│Ж",
    Cotton: "р▓╣р▓др│Нр▓др▓┐",
    Sugarcane: "р▓Хр▓░р▓┐р▓мр│Зр▓╡р│Б",
    Potato: "р▓Жр▓▓р│Вр▓Чр▓бр│Нр▓бр│Ж",
    Groundnut: "р▓Хр▓бр▓▓р│Жр▓Хр▓╛р▓пр▓┐",
  },
  te: {
    Wheat: "р░Чр▒Лр░зр▒Бр░о",
    Rice: "р░мр░┐р░пр▒Нр░пр░В",
    Maize: "р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и",
    Soybean: "р░╕р▒Лр░пр░╛р░мр▒Ар░ир▒Н",
    "Pulses (Lentils)": "р░кр░кр▒Нр░кр▒Бр░▓р▒Б",
    Cotton: "р░кр░др▒Нр░др░┐",
    Sugarcane: "р░Ър▒Жр░░р░Хр▒Бр░Чр░бр▒Нр░бр░┐",
    Potato: "р░мр░Вр░Чр░╛р░│р░╛р░жр▒Бр░Вр░к",
    Groundnut: "р░╡р▒Зр░░р▒Бр░╢р▒Жр░ир░Ч",
  },
  ml: {
    Wheat: "р┤Чр╡Лр┤др┤ор╡Нр┤кр╡Н",
    Rice: "р┤Ер┤░р┤┐",
    Maize: "р┤Ър╡Лр┤│р┤В",
    Soybean: "р┤╕р╡Лр┤пр┤╛р┤мр╡Ар╡╗",
    "Pulses (Lentils)": "р┤кр┤пр╡╝р┤╡р╡╝р┤Чр┤Щр╡Нр┤Щр╡╛",
    Cotton: "р┤кр┤др╡Нр┤др┤┐",
    Sugarcane: "р┤Хр┤░р┤┐р┤ор╡Нр┤кр╡Н",
    Potato: "р┤Йр┤░р╡Бр┤│р┤Хр┤┐р┤┤р┤Щр╡Нр┤Щр╡Н",
    Groundnut: "р┤╡р╡Зр┤░р╡НтАНр┤Хр╡Нр┤Хр┤Яр┤▓",
  },
};

// helper to translate crop names
function translateCropName(lang: keyof typeof cropNameTranslations, name: string) {
  return cropNameTranslations[lang]?.[name] ?? name;
}

// Add: per-crop content translations and helper
const cropContentTranslations: Record<
  keyof typeof cropNameTranslations,
  Record<
    string,
    {
      explanation?: string;
      fertilizerAdvice?: string;
      irrigationAdvice?: string;
    }
  >
> = {
  en: {}, // English shows originals
  hi: {
    Wheat: {
      explanation: "рдЧреЗрд╣реВрдБ рдордзреНрдпрдо рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдФрд░ рд╕рдВрддреБрд▓рд┐рдд pH рдореЗрдВ рдЕрдЪреНрдЫрд╛ рдмрдврд╝рддрд╛ рд╣реИред",
      fertilizerAdvice: "рд╕рдВрддреБрд▓рд┐рдд NPK рдЙрд░реНрд╡рд░рдХ рджреЗрдВред рдмреБрд╡рд╛рдИ рдХреЗ рд╕рдордп DAP рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
      irrigationAdvice: "рдХреНрд░рд╛рдЙрди рд░реВрдЯ рдФрд░ рджрд╛рдирд╛ рднрд░рдиреЗ рдХреЗ рдЪрд░рдгреЛрдВ рдореЗрдВ рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВред",
    },
    Rice: {
      explanation: "рдЪрд╛рд╡рд▓ рдирд╛рдЗрдЯреНрд░реЛрдЬрди-рд╕рдореГрджреНрдз рд╡ рдЕрдЪреНрдЫреА рдЬрд▓ рдЙрдкрд▓рдмреНрдзрддрд╛ рд╡рд╛рд▓реА рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдореЗрдВ рдкрдирдкрддрд╛ рд╣реИред",
      fertilizerAdvice: "рдЬреИрд╡рд┐рдХ рдЦрд╛рдж рдФрд░ рдмрд╛рдпреЛ-рдлрд░реНрдЯрд┐рд▓рд╛рдЗрдЬрд╝рд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред 4:2:1 NPK рджреЗрдВред",
      irrigationAdvice: "рд╡рд┐рдХрд╛рд╕ рдХреЗ рджреМрд░рд╛рди 2-5 рд╕реЗрдореА рдкрд╛рдиреА рдмрдирд╛рдП рд░рдЦреЗрдВред",
    },
    Maize: {
      explanation: "рдордХрдИ рдХреЛ рдЕрдЪреНрдЫрд╛ рдлрд╛рд╕реНрдлреЛрд░рд╕ рдФрд░ рд╕рдВрддреБрд▓рд┐рдд pH рдЪрд╛рд╣рд┐рдПред",
      fertilizerAdvice: "рд╡рдирд╕реНрдкрддрд┐ рд╡реГрджреНрдзрд┐ рдореЗрдВ рдЙрдЪреНрдЪ рдирд╛рдЗрдЯреНрд░реЛрдЬрди рджреЗрдВред",
      irrigationAdvice: "рдорд╣рддреНрд╡рдкреВрд░реНрдг рдЪрд░рдгреЛрдВ рдореЗрдВ рдирд┐рдпрдорд┐рдд рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВред",
    },
    "Pulses (Lentils)": {
      explanation: "рджрд╛рд▓реЗрдВ рдЕрдкрдирд╛ рдирд╛рдЗрдЯреНрд░реЛрдЬрди рд╕реНрд╡рдпрдВ рдареАрдХ рдХрд░рддреА рд╣реИрдВ рдФрд░ рддрдЯрд╕реНрде pH рдкрд╕рдВрдж рдХрд░рддреА рд╣реИрдВред",
      fertilizerAdvice: "рдХрдо рдирд╛рдЗрдЯреНрд░реЛрдЬрди, рдкреЛрдЯрд╛рд╢ рдФрд░ рдлреЙрд╕реНрдлреЛрд░рд╕ рдкрд░ рдзреНрдпрд╛рди рджреЗрдВред",
      irrigationAdvice: "рдлреВрд▓ рдФрд░ рдлрд▓реА рдмрдирдиреЗ рдкрд░ рд╣рд▓реНрдХреА рд╕рд┐рдВрдЪрд╛рдИ рд░рдЦреЗрдВред",
    },
    Soybean: {
      explanation: "рд╕реЛрдпрд╛рдмреАрди рдЕрдЪреНрдЫреЗ рдЬрд▓-рдирд┐рдХрд╛рд╕ рд╡рд╛рд▓реА рдорд┐рдЯреНрдЯреА рдореЗрдВ рдмрдврд╝рддреА рд╣реИред",
      fertilizerAdvice: "рдХрдо рдирд╛рдЗрдЯреНрд░реЛрдЬрди, рдордзреНрдпрдо рдлреЙрд╕реНрдлреЛрд░рд╕ рдФрд░ рдкреЛрдЯрд╛рд╢ред",
      irrigationAdvice: "рдлреВрд▓ рдФрд░ рдлрд▓реА рдмрдирдиреЗ рдкрд░ рдкрд╛рдиреА рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИред",
    },
    Cotton: {
      explanation: "рдХрдкрд╛рд╕ рдХреЛ рд░реЗрд╢реЛрдВ рдХреЗ рд▓рд┐рдП рдЕрдзрд┐рдХ рдкреЛрдЯрд╛рд╢ рдФрд░ рдкрд░реНрдпрд╛рдкреНрдд рдкрд╛рдиреА рдЪрд╛рд╣рд┐рдПред",
      fertilizerAdvice: "рдмреЛрд▓ рд╡рд┐рдХрд╛рд╕ рдХреЗ рд╕рдордп рдкреЛрдЯрд╛рд╢-рд╕рдореГрджреНрдз рдЙрд░реНрд╡рд░рдХ рджреЗрдВред",
      irrigationAdvice: "рдЙрдЪреНрдЪ (700тАУ1300mm) рдЬрд▓ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ред",
    },
    Sugarcane: {
      explanation: "рдЧрдиреНрдирд╛ рджреАрд░реНрдШ рдЕрд╡рдзрд┐ рдХреА рдлрд╕рд▓ рд╣реИ; рдЙрдЪреНрдЪ рдЬрд▓ рдФрд░ рдкреЛрд╖рдХ рддрддреНрд╡реЛрдВ рдХреА рдЬрд░реВрд░рддред",
      fertilizerAdvice: "NPK рдХрд╛ рд╕рдВрддреБрд▓рд┐рдд рдЕрдиреБрдкрд╛рдд, рдЬреИрд╡рд┐рдХ рдЦрд╛рдж рдЬреЛрдбрд╝реЗрдВред",
      irrigationAdvice: "рдирд┐рдпрдорд┐рдд рдлрд░реЛ рд╕рд┐рдВрдЪрд╛рдИ рд░рдЦреЗрдВред",
    },
    Potato: {
      explanation: "рдЖрд▓реВ рдардВрдбреЗ рдореМрд╕рдо рдФрд░ рдЕрдЪреНрдЫреЗ рдЬрд▓-рдирд┐рдХрд╛рд╕ рд╡рд╛рд▓реА рдорд┐рдЯреНрдЯреА рдореЗрдВ рдмрдврд╝рддрд╛ рд╣реИред",
      fertilizerAdvice: "рд░реЛрдкрдг рдХреЗ рд╕рдордп NPK рдФрд░ рдмрд╛рдж рдореЗрдВ рдЯреЙрдк рдбреНрд░реЗрд╕рд┐рдВрдЧред",
      irrigationAdvice: "рдХрдВрдж рдмрдирдиреЗ рдкрд░ рдирдореА рдмрдирд╛рдП рд░рдЦреЗрдВред",
    },
    Groundnut: {
      explanation: "рдореВрдВрдЧрдлрд▓реА рд░реЗрддреАрд▓реА рджреЛрдордЯ рдФрд░ рдЧрд░реНрдо рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдореЗрдВ рдЕрдиреБрдХреВрд▓ред",
      fertilizerAdvice: "рдЬрд┐рдкреНрд╕рдо рдФрд░ рдкреЛрдЯрд╛рд╢ рджреЗрдВ; рдирд╛рдЗрдЯреНрд░реЛрдЬрди рд╕реАрдорд┐рдд рд░рдЦреЗрдВред",
      irrigationAdvice: "рдлреВрд▓ рдФрд░ рдкреЙрдб рднрд░рдиреЗ рдкрд░ рд╕рдорд╛рди рдирдореА рд░рдЦреЗрдВред",
    },
  },
  ta: {
    Wheat: {
      explanation: "роХрпЛродрпБроорпИ рооро┐родрооро╛рой роирпИроЯрпНро░роЬройрпН рооро▒рпНро▒рпБроорпН роЪроороиро┐ро▓рпИ pH роЗро▓рпН роиройрпНро▒ро╛роХ ро╡ро│ро░рпБроорпН.",
      fertilizerAdvice: "роЪроороиро┐ро▓рпИ NPK роЙро░роорпН. ро╡ро┐родрпИрокрпНрокро┐ро▓рпН DAP рокропройрпНрокро╛роЯрпБ.",
      irrigationAdvice: "роорпБроХрпНроХро┐роп ро╡ро│ро░рпНроЪрпНроЪро┐ роХроЯрпНроЯроЩрпНроХро│ро┐ро▓рпН рокро╛роЪройроорпН роЪрпЖропрпНропро╡рпБроорпН.",
    },
    Rice: {
      explanation: "роЕро░ро┐роЪро┐ роирпИроЯрпНро░роЬройрпН роиро┐ро▒рпИроирпНрод, роирпАро░рпН роХро┐роЯрпИроХрпНроХрпБроорпН роЪрпВро┤ро▓ро┐ро▓рпН роЪро┐ро▒рокрпНрокро╛роХ ро╡ро│ро░рпБроорпН.",
      fertilizerAdvice: "роЬрпЖропро╡ роЙро░роорпН рооро▒рпНро▒рпБроорпН 4:2:1 NPK роЕро│ро┐роХрпНроХро╡рпБроорпН.",
      irrigationAdvice: "ро╡ро│ро░рпНроЪрпНроЪро┐роХрпН роХро╛ро▓роорпН роорпБро┤рпБро╡родрпБроорпН 2тАУ5роЪрпЖ.роорпА роирпАро░рпН ро╡рпИродрпНродро┐ро░рпБроЩрпНроХро│рпН.",
    },
    Maize: {
      explanation: "роЪрпЛро│роорпН роиро▓рпНро▓ рокро╛ро╕рпНрокро░ро╕рпН рооро▒рпНро▒рпБроорпН роЪроороиро┐ро▓рпИ pH родрпЗро╡рпИрокрпНрокроЯрпБроХро┐ро▒родрпБ.",
      fertilizerAdvice: "роЪрпЖроЯро┐ро╡ро│ро░рпНроЪрпНроЪро┐ роХроЯрпНроЯродрпНродро┐ро▓рпН роЕродро┐роХ роирпИроЯрпНро░роЬройрпН роЙро░роорпН.",
      irrigationAdvice: "родро╡ро▒ро╛родрпБ рокро╛роЪройроорпН роЪрпЖропрпНропро╡рпБроорпН.",
    },
    "Pulses (Lentils)": {
      explanation: "рокро░рпБрокрпНрокрпБроХро│рпН родро╛роЩрпНроХро│рпЗ роирпИроЯрпНро░роЬройрпН роиро┐ро▓рпИроиро┐ро▒рпБродрпНродрпБроорпН; роироЯрпБродрпНродро░ pH ро╡ро┐ро░рпБроорпНрокрпБроорпН.",
      fertilizerAdvice: "роХрпБро▒рпИроирпНрод роирпИроЯрпНро░роЬройрпН; рокро╛ро╕рпНрокро░ро╕рпН/рокрпКроЯрпНроЯро╛роЪро┐ро▓рпН роХро╡ройроорпН.",
      irrigationAdvice: "рооро▓ро░рпНроЪрпНроЪро┐ рооро▒рпНро▒рпБроорпН роХрпКроЯрпНроЯрпИроХро│рпН роЙро░рпБро╡ро╛роХрпБроорпН рокрпЛродрпБ ро▓рпЗроЪро╛рой рокро╛роЪройроорпН.",
    },
    Soybean: {
      explanation: "роЪрпЛропро╛ роиро▓рпНро▓ ро╡роЯро┐роХро╛ро▓рпН роЙро│рпНро│ роорогрпНрогро┐ро▓рпН ро╡ро│ро░рпБроорпН.",
      fertilizerAdvice: "роХрпБро▒рпИроирпНрод N, рооро┐родрооро╛рой P рооро▒рпНро▒рпБроорпН K.",
      irrigationAdvice: "рооро▓ро░рпНроЪрпНроЪро┐/рокро╛роЯрпН роиро┐ро░рокрпНрокрпБ роирпЗро░родрпНродро┐ро▓рпН родрогрпНрогрпАро░рпН роЕро╡роЪро┐ропроорпН.",
    },
    Cotton: {
      explanation: "рокро░рпБродрпНродро┐ роиро╛ро░ро┐ро▒рпНроХро╛роХ роЕродро┐роХ рокрпКроЯрпНроЯро╛роЪрпБроорпН рокрпЛродро┐роп роирпАро░рпБроорпН родрпЗро╡рпИ.",
      fertilizerAdvice: "рокрпЛро▓рпН ро╡ро│ро░рпНроЪрпНроЪро┐ропро┐ро▓рпН K-рокрпЖро░рпБрооро│ро╡рпБ роЙро░роорпН.",
      irrigationAdvice: "роЙропро░рпН (700тАУ1300рооро┐.роорпА) роирпАро░рпН родрпЗро╡рпИ.",
    },
    Sugarcane: {
      explanation: "роХро░рпБроорпНрокрпБ роирпАрогрпНроЯроХро╛ро▓ рокропро┐ро░рпН; роЕродро┐роХ роирпАро░рпН/роЙроЯрпНроЯроЪрпНроЪродрпНродрпБ родрпЗро╡рпИ.",
      fertilizerAdvice: "роЪроороиро┐ро▓рпИ NPK, роЗропро▒рпНроХрпИ роЙро░роорпН роЪрпЗро░рпНроХрпНроХро╡рпБроорпН.",
      irrigationAdvice: "ро╡ро░ро┐роЪрпИ рокро╛роЪройроорпН роЪрпАро░ро╛роХ роЪрпЖропрпНропро╡рпБроорпН.",
    },
    Potato: {
      explanation: "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ роХрпБро│ро┐ро░рпНроирпНрод ро╡ро╛ройро┐ро▓рпИ рооро▒рпНро▒рпБроорпН ро╡роЯро┐роХро╛ро▓рпН роорогрпНрогро┐ро▓рпН ро╡ро│ро░рпБроорпН.",
      fertilizerAdvice: "роироЯрпНроЯрпБ роирпЗро░роорпН NPK, рокро┐ройрпНройро░рпН роЯро╛рокрпН роЯро┐ро░роЪро┐роЩрпН.",
      irrigationAdvice: "роХро┐ро┤роЩрпНроХрпБ роЙро░рпБро╡ро╛роХрпБроорпН рокрпЛродрпБ роИро░рокрпНрокродроорпН ро╡рпИродрпНродро┐ро░рпБроЩрпНроХро│рпН.",
    },
    Groundnut: {
      explanation: "ро╡рпЗро░рпНроХрпНроХроЯро▓рпИ роорогро▓рпНро╡роХрпИ роорогрпН рооро▒рпНро▒рпБроорпН роЪрпВроЯро╛рой роиро┐ро▓рпИ ро╡ро┐ро░рпБроорпНрокрпБроорпН.",
      fertilizerAdvice: "роЬро┐рокрпНроЪроорпН, рокрпКроЯрпНроЯро╛роЪрпБ; роирпИроЯрпНро░роЬройрпН роХрпБро▒рпИро╡рпБ.",
      irrigationAdvice: "рооро▓ро░рпНроЪрпНроЪро┐/роХрпКроЯрпНроЯрпИ роиро┐ро░рокрпНрокрпБ роирпЗро░родрпНродро┐ро▓рпН роИро░рокрпНрокродроорпН роиро┐ро▓рпИроиро┐ро▒рпБродрпНродро╡рпБроорпН.",
    },
  },
  bn: {
    Wheat: { explanation: "ржЧржо ржорж╛ржЭрж╛рж░рж┐ ржирж╛ржЗржЯрзНрж░рзЛржЬрзЗржи ржУ рж╕ржорждрзБрж▓рзНржп pH ржП ржнрж╛рж▓рзЛ ржмрж╛ржбрж╝рзЗред", fertilizerAdvice: "рж╕рж╛ржоржЮрзНржЬрж╕рзНржпржкрзВрж░рзНржг NPK ржжрж┐ржи, ржмржкржирзЗрж░ рж╕ржоржпрж╝ DAPред", irrigationAdvice: "ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржкрж░рзНржпрж╛ржпрж╝рзЗ рж╕рзЗржЪ ржжрж┐ржиред" },
    Rice: { explanation: "ржЪрж╛рж▓ ржирж╛ржЗржЯрзНрж░рзЛржЬрзЗржирж╕ржорзГржжрзНржз ржУ ржЬрж▓рзЗ ржнрзЗржЬрж╛ ржЕржмрж╕рзНржерж╛ржпрж╝ ржнрж╛рж▓рзЛ ржмрж╛ржбрж╝рзЗред", fertilizerAdvice: "ржЬрзИржм рж╕рж╛рж░ ржУ 4:2:1 NPK ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред", irrigationAdvice: "ржорзМрж╕рзБржоржЬрзБржбрж╝рзЗ рзитАУрзл рж╕рзЗржорж┐ ржЬрж▓ рж░рж╛ржЦрзБржиред" },
    Maize: { explanation: "ржнрзБржЯрзНржЯрж╛ржпрж╝ ржнрж╛рж▓рзЛ ржлрж╕ржлрж░рж╛рж╕ ржУ рж╕ржорждрзБрж▓рзНржп pH ржжрж░ржХрж╛рж░ред", fertilizerAdvice: "рж╕ржмрзБржЬ ржмрзГржжрзНржзрж┐рждрзЗ ржмрзЗрж╢рж┐ ржирж╛ржЗржЯрзНрж░рзЛржЬрзЗржи ржжрж┐ржиред", irrigationAdvice: "ржирж┐ржпрж╝ржорж┐ржд рж╕рзЗржЪ ржжрж┐ржиред" },
    "Pulses (Lentils)": { explanation: "ржбрж╛рж▓ ржирж┐ржЬрзЗ ржирж╛ржЗржЯрзНрж░рзЛржЬрзЗржи рж╕рзНржерж┐рж░ ржХрж░рзЗ; ржирж┐рж░ржкрзЗржХрзНрж╖ pH ржкржЫржирзНржжред", fertilizerAdvice: "ржХржо ржирж╛ржЗржЯрзНрж░рзЛржЬрзЗржи; ржкржЯрж╛рж╢ ржУ ржлрж╕ржлрж░рж╛рж╕рзЗ ржлрзЛржХрж╛рж╕ред", irrigationAdvice: "ржлрзБрж▓ ржУ рж╢рзБржБржЯрж┐ ржнрж░рж╛рж░ рж╕ржоржпрж╝ рж╣рж╛рж▓ржХрж╛ рж╕рзЗржЪред" },
    Soybean: { explanation: "рж╕ржпрж╝рж╛ржмрж┐ржи ржнрж╛рж▓ ржбрзНрж░рзЗржирзЗржЬржпрзБржХрзНржд ржорж╛ржЯрж┐рждрзЗ ржмрж╛ржбрж╝рзЗред", fertilizerAdvice: "ржХржо N, ржорж╛ржЭрж╛рж░рж┐ P ржУ Kред", irrigationAdvice: "ржлрзБрж▓ ржУ рж╢рзБржБржЯрж┐ ржнрж░рж╛рж░ рж╕ржоржпрж╝ ржЬрж▓ ржЬрж░рзБрж░рж┐ред" },
    Cotton: { explanation: "рж╕рзБрждрж┐рж░ ржЬржирзНржп ржЙржЪрзНржЪ ржкржЯрж╛рж╢ ржУ ржпржерзЗрж╖рзНржЯ ржЬрж▓ ржжрж░ржХрж╛рж░ред", fertilizerAdvice: "ржмрж▓ ржЧржаржирзЗ ржкржЯрж╛рж╢ рж╕ржорзГржжрзНржз рж╕рж╛рж░ ржжрж┐ржиред", irrigationAdvice: "ржЙржЪрзНржЪ (700тАУ1300ржорж┐ржорж┐) ржЬрж▓рзЗрж░ ржкрзНрж░ржпрж╝рзЛржЬржиред" },
    Sugarcane: { explanation: "ржЖржЦ ржжрзАрж░рзНржШржорзЗржпрж╝рж╛ржжрж┐ ржлрж╕рж▓; ржмрзЗрж╢рж┐ ржЬрж▓ ржУ ржкрзБрж╖рзНржЯрж┐ ржжрж░ржХрж╛рж░ред", fertilizerAdvice: "рж╕рж╛ржоржЮрзНржЬрж╕рзНржпржкрзВрж░рзНржг NPK, ржЬрзИржм рж╕рж╛рж░ ржпрзЛржЧ ржХрж░рзБржиред", irrigationAdvice: "ржирж┐ржпрж╝ржорж┐ржд ржирж╛рж▓рж╛ рж╕рзЗржЪ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржиред" },
    Potato: { explanation: "ржЖрж▓рзБ ржарж╛ржирзНржбрж╛ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржнрж╛рж▓ ржбрзНрж░рзЗржирзЗржЬрзЗ ржнрж╛рж▓рзЛред", fertilizerAdvice: "рж░рзЛржкржгрзЗрж░ рж╕ржоржпрж╝ NPK, ржкрж░рзЗ ржЯржк ржбрзНрж░рзЗрж╕рж┐ржВред", irrigationAdvice: "ржХржирзНржж ржЧржаржирзЗ ржЖрж░рзНржжрзНрж░рждрж╛ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржиред" },
    Groundnut: { explanation: "ржЪрж┐ржирж╛ржмрж╛ржжрж╛ржо ржмрзЗрж▓рзЗ ржжрзЛржЖржБрж╢ ржУ ржЧрж░ржо ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржкржЫржирзНржж ржХрж░рзЗред", fertilizerAdvice: "ржЬрж┐ржкрж╕рж╛ржо ржУ ржкржЯрж╛рж╢; ржирж╛ржЗржЯрзНрж░рзЛржЬрзЗржи рж╕рзАржорж┐рждред", irrigationAdvice: "ржлрзБрж▓ ржУ ржлрж▓ ржнрж░рж╛рж░ рж╕ржоржпрж╝ рж╕ржорж╛ржи ржЖрж░рзНржжрзНрж░рждрж╛ред" },
  },
  ur: {
    Wheat: { explanation: "┌п┘Ж╪п┘Е ┘Е╪╣╪к╪п┘Д ┘Ж╪з╪ж┘╣╪▒┘И╪м┘Ж ╪з┘И╪▒ ┘Е╪к┘И╪з╪▓┘Ж pH ┘Е█М┌║ ╪з┌Ж┌╛█М ╪и┌С┌╛╪к█М █Б█Т█Ф", fertilizerAdvice: "┘Е╪к┘И╪з╪▓┘Ж NPK ╪п█М┌║╪М ╪и┘И╪з╪ж█М ┘╛╪▒ DAP█Ф", irrigationAdvice: "╪з█Б┘Е ┘Е╪▒╪з╪н┘Д ┘╛╪▒ ╪в╪и┘╛╪з╪┤█М ┌й╪▒█М┌║█Ф" },
    Rice: { explanation: "┌Ж╪з┘И┘Д ┘Ж╪з╪ж┘╣╪▒┘И╪м┘Ж ╪│█Т ╪и┌╛╪▒┘╛┘И╪▒ ╪з┘И╪▒ ┘╛╪з┘Ж█М ┘И╪з┘Д█М ╪н╪з┘Д╪к ┘Е█М┌║ ┘╛┌╛┘Д╪к╪з █Б█Т█Ф", fertilizerAdvice: "┘Ж╪з┘Е█М╪з╪к█М ┌й┌╛╪з╪п ╪з┘И╪▒ 4:2:1 NPK ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒█М┌║█Ф", irrigationAdvice: "┘Е┘И╪│┘Е ╪и┌╛╪▒ 2тАУ5 ╪│┘Е ┘╛╪з┘Ж█М ╪и╪▒┘В╪▒╪з╪▒ ╪▒┌й┌╛█М┌║█Ф" },
    Maize: { explanation: "┘Е┌й╪ж█М ┌й┘И ╪з┌Ж┌╛╪з ┘Б╪з╪│┘Б┘И╪▒╪│ ╪з┘И╪▒ ┘Е╪к┘И╪з╪▓┘Ж pH ╪п╪▒┌й╪з╪▒ █Б█Т█Ф", fertilizerAdvice: "╪│╪и╪▓ ╪и┌С┌╛┘И╪к╪▒█М ┘Е█М┌║ ╪▓█М╪з╪п█Б ┘Ж╪з╪ж┘╣╪▒┘И╪м┘Ж ╪п█М┌║█Ф", irrigationAdvice: "╪и╪з┘В╪з╪╣╪п█Б ╪в╪и┘╛╪з╪┤█М ┌й╪▒█М┌║█Ф" },
    "Pulses (Lentils)": { explanation: "╪п╪з┘Д█М┌║ ╪о┘И╪п ┘Ж╪з╪ж┘╣╪▒┘И╪м┘Ж ┘╣┌╛█М┌й ┌й╪▒╪к█М █Б█М┌║╪Ы ┘Е╪╣╪к╪п┘Д pH ┘╛╪│┘Ж╪п ┌й╪▒╪к█М █Б█М┌║█Ф", fertilizerAdvice: "┌й┘Е ┘Ж╪з╪ж┘╣╪▒┘И╪м┘Ж╪Ы ┘╛┘И┘╣╪з╪┤ ╪з┘И╪▒ ┘Б╪з╪│┘Б┘И╪▒╪│ ┘╛╪▒ ╪▓┘И╪▒█Ф", irrigationAdvice: "┘╛┌╛┘И┘Д ╪з┘И╪▒ ┘╛┌╛┘Д█М ╪и┘Ж┘Ж█Т ┘╛╪▒ █Б┘Д┌й█М ╪в╪и┘╛╪з╪┤█М█Ф" },
    Soybean: { explanation: "╪│┘И█М╪з ╪и█М┘Ж ╪з┌Ж┌╛█М ┘Ж┌й╪з╪│█М ┘И╪з┘Д█М ┘Е┘╣█М ┘Е█М┌║ ╪з┌п╪к█М █Б█Т█Ф", fertilizerAdvice: "┌й┘Е N╪М ╪п╪▒┘Е█М╪з┘Ж█М P ╪з┘И╪▒ K█Ф", irrigationAdvice: "┘╛┌╛┘И┘Д ╪з┘И╪▒ ┘╛┌╛┘Д█М ┌й█Т ╪п┘И╪▒╪з┘Ж ┘╛╪з┘Ж█М ╪╢╪▒┘И╪▒█М█Ф" },
    Cotton: { explanation: "╪▒┘И╪ж█М ┌й█Т ┘Д█М█Т ╪▓█М╪з╪п█Б ┘╛┘И┘╣╪з╪┤ ╪з┘И╪▒ ┘Е┘Ж╪з╪│╪и ┘╛╪з┘Ж█М ╪п╪▒┌й╪з╪▒ █Б█Т█Ф", fertilizerAdvice: "╪и┘И┘Д ┌И█М┘И┘Д┘╛┘Е┘Ж┘╣ ┘Е█М┌║ ┘╛┘И┘╣╪з╪┤ ╪│█Т ╪и┌╛╪▒┘╛┘И╪▒ ┌й┌╛╪з╪п█Ф", irrigationAdvice: "╪▓█М╪з╪п█Б (700тАУ1300mm) ┘╛╪з┘Ж█М ╪п╪▒┌й╪з╪▒█Ф" },
    Sugarcane: { explanation: "┌п┘Ж╪з ╪╖┘И█М┘Д ╪п┘И╪▒╪з┘Ж█М█Б ┌й█М ┘Б╪╡┘Д █Б█Т╪Ы ╪▓█М╪з╪п█Б ┘╛╪з┘Ж█М ┘И ╪║╪░╪з╪ж█М╪к ┌Ж╪з█Б█М█Т█Ф", fertilizerAdvice: "┘Е╪к┘И╪з╪▓┘Ж NPK╪М ┘Ж╪з┘Е█М╪з╪к█М ┌й┌╛╪з╪п ╪┤╪з┘Е┘Д ┌й╪▒█М┌║█Ф", irrigationAdvice: "┘Ж╪з┘Д█М ╪в╪и┘╛╪з╪┤█М ╪и╪з┘В╪з╪╣╪п┌п█М ╪│█Т ╪▒┌й┌╛█М┌║█Ф" },
    Potato: { explanation: "╪в┘Д┘И ┘╣┌╛┘Ж┌И█Т ┘Е┘И╪│┘Е ╪з┘И╪▒ ╪з┌Ж┌╛█М ┘Ж┌й╪з╪│█М ┘Е█М┌║ ╪и█Б╪к╪▒█Ф", fertilizerAdvice: "┘╛┘И╪п█Т ┘Д┌п╪з╪к█Т ┘И┘В╪к NPK ╪з┘И╪▒ ╪и╪╣╪п ┘Е█М┌║ ┘╣╪з┘╛ ┌И╪▒█М╪│┘Ж┌п█Ф", irrigationAdvice: "┌й┘Д╪и ╪и┘Ж┘Ж█Т ┘╛╪▒ ┘Ж┘Е█М ╪и╪▒┘В╪▒╪з╪▒ ╪▒┌й┌╛█М┌║█Ф" },
    Groundnut: { explanation: "┘Е┘И┘Ж┌п ┘╛┌╛┘Д█М ╪▒█М╪к┘Д█М ╪п┘И╪з┘Е█М ┘Е┘╣█М ╪з┘И╪▒ ┌п╪▒┘Е ╪н╪з┘Д╪з╪к ┘╛╪│┘Ж╪п ┌й╪▒╪к█М █Б█Т█Ф", fertilizerAdvice: "╪м┘╛╪│┘О┘Е ╪з┘И╪▒ ┘╛┘И┘╣╪з╪┤╪Ы ┘Ж╪з╪ж┘╣╪▒┘И╪м┘Ж ┘Е╪н╪п┘И╪п ╪▒┌й┌╛█М┌║█Ф", irrigationAdvice: "┘╛┌╛┘И┘Д ╪з┘И╪▒ ┘╛┘И┌И ┘Б┘Д┘Ж┌п ┘╛╪▒ █М┌й╪│╪з┌║ ┘Ж┘Е█М█Ф" },
  },
  kn: {
    Wheat: { explanation: "р▓Чр│Лр▓жр▓┐ р▓ор▓зр│Нр▓пр▓о р▓ир│Ир▓Яр│Нр▓░р│Лр▓Ьр▓ир│Н р▓ор▓др│Нр▓др│Б р▓╕р▓о pH р▓ир▓▓р│Нр▓▓р▓┐ р▓Ър│Жр▓ир│Нр▓ир▓╛р▓Чр▓┐ р▓мр│Жр▓│р│Жр▓пр│Бр▓др│Нр▓др▓жр│Ж.", fertilizerAdvice: "р▓╕р▓ор▓др│Лр▓▓р▓и NPK; р▓мр▓┐р▓др│Нр▓др▓ир│Жр▓Чр│Ж DAP.", irrigationAdvice: "р▓ор│Бр▓Цр│Нр▓п р▓╣р▓Вр▓др▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓ир│Ар▓░р▓╛р▓╡р▓░р▓┐ р▓ор▓╛р▓бр▓┐." },
    Rice: { explanation: "р▓Ер▓Хр│Нр▓Хр▓┐ р▓ир│Ир▓Яр│Нр▓░р│Лр▓Ьр▓ир│Н р▓╕р▓ор│Гр▓жр│Нр▓з, р▓ир│Ар▓░р│Б р▓▓р▓нр│Нр▓п р▓кр▓░р▓┐р▓╕р▓░р▓жр▓▓р│Нр▓▓р▓┐ р▓Ър│Жр▓ир│Нр▓ир▓╛р▓Чр▓┐ р▓мр│Жр▓│р│Жр▓пр│Бр▓др│Нр▓др▓жр│Ж.", fertilizerAdvice: "р▓╕р▓╛р▓╡р▓пр▓╡ р▓Чр│Кр▓мр│Нр▓мр▓░ р▓╣р▓╛р▓Чр│В 4:2:1 NPK.", irrigationAdvice: "р▓мр│Жр▓│р│Жр▓пр▓╛р▓жр▓░р▓┐р▓Вр▓жр│Б 2тАУ5р▓╕р│Ж.р▓ор│А р▓ир│Ар▓░р│Б р▓Зр▓░р▓▓р▓┐." },
    Maize: { explanation: "р▓Ьр│Лр▓│р▓Хр│Нр▓Хр│Ж р▓Йр▓др│Нр▓др▓о р▓лр▓╛р▓╕р│Нр▓лр▓░р▓╕р│Н р▓ор▓др│Нр▓др│Б р▓╕р▓о pH р▓мр│Зр▓Хр│Б.", fertilizerAdvice: "р▓Кр▓Яр▓ж р▓мр│Жр▓│р▓╡р▓гр▓┐р▓Чр│Жр▓пр▓▓р│Нр▓▓р▓┐ р▓╣р│Жр▓Ър│Нр▓Ър│Б N.", irrigationAdvice: "р▓ир▓┐р▓пр▓ор▓┐р▓д р▓ир│Ар▓░р▓╛р▓╡р▓░р▓┐.", },
    "Pulses (Lentils)": { explanation: "р▓мр│Зр▓│р│Жр▓Чр▓│р│Б р▓╕р│Нр▓╡р▓пр▓В р▓ир│Ир▓Яр│Нр▓░р│Лр▓Ьр▓ир│Н р▓ир▓┐р▓╢р│Нр▓Ър▓▓р▓Чр│Кр▓│р▓┐р▓╕р│Бр▓др│Нр▓др▓╡р│Ж; р▓╕р▓о pH р▓Зр▓╖р│Нр▓Я.", fertilizerAdvice: "р▓Хр▓бр▓┐р▓ор│Ж N; P р▓ор▓др│Нр▓др│Б K р▓ор│Зр▓▓р│Ж р▓Чр▓ор▓и.", irrigationAdvice: "р▓╣р│Вр▓╡р│Б/р▓Хр▓╛р▓пр▓┐ р▓нр▓░р│Нр▓др▓┐р▓пр▓▓р│Нр▓▓р▓┐ р▓╕р▓гр│Нр▓г р▓кр▓╛р▓╕р▓гр│Ж.", },
    Soybean: { explanation: "р▓╕р│Кр▓пр▓╛р▓мр▓┐р▓ир│Н р▓Йр▓др│Нр▓др▓о р▓ир│Ар▓░р│Бр▓Хр▓╕р▓┐р▓д р▓ор▓гр│Нр▓гр▓┐р▓ир▓▓р│Нр▓▓р▓┐ р▓мр│Жр▓│р│Жр▓пр│Бр▓др│Нр▓др▓жр│Ж.", fertilizerAdvice: "р▓Хр▓бр▓┐р▓ор│Ж N, р▓ор▓зр│Нр▓пр▓о P, K.", irrigationAdvice: "р▓╣р│Вр▓╡р│Б/р▓кр▓╛р▓бр│Н р▓╕р▓ор▓пр▓жр▓▓р│Нр▓▓р▓┐ р▓ир│Ар▓░р│Б р▓Ер▓Чр▓др│Нр▓п.", },
    Cotton: { explanation: "р▓╣р▓др│Нр▓др▓┐р▓Чр│Ж р▓╣р│Жр▓Ър│Нр▓Ър▓┐р▓и р▓кр│Кр▓Яр▓╛р▓╖р│Н р▓╣р▓╛р▓Чр│В р▓ир│Ар▓░р▓┐р▓и р▓Ер▓╡р▓╢р│Нр▓пр▓Хр▓др│Ж.", fertilizerAdvice: "р▓мр│Лр▓▓р│Н р▓мр│Жр▓│р▓╡р▓гр▓┐р▓Чр│Жр▓пр▓▓р│Нр▓▓р▓┐ K-р▓╕р▓ор│Гр▓жр│Нр▓з р▓Чр│Кр▓мр│Нр▓мр▓░.", irrigationAdvice: "р▓╣р│Жр▓Ър│Нр▓Ър▓┐р▓и (700тАУ1300р▓ор▓┐р▓ор│А) р▓ир│Ар▓░р│Б р▓мр│Зр▓Хр│Б.", },
    Sugarcane: { explanation: "р▓Хр▓░р▓┐р▓пр│Бр▓Вр▓мр│Б р▓жр│Ар▓░р│Нр▓Шр▓╛р▓╡р▓зр▓┐ р▓мр│Жр▓│р│Ж; р▓╣р│Жр▓Ър│Нр▓Ър│Бр▓╡р▓░р▓┐ р▓ир│Ар▓░р│Б/р▓кр│Лр▓╖р▓Хр▓Чр▓│р│Б р▓мр│Зр▓Хр│Б.", fertilizerAdvice: "р▓╕р▓ор▓др│Лр▓▓р▓и NPK, р▓╕р▓╛р▓╡р▓пр▓╡ р▓Чр│Кр▓мр│Нр▓мр▓░ р▓╕р│Зр▓░р▓┐р▓╕р▓┐.", irrigationAdvice: "р▓ир▓╛р▓▓р│Ж р▓ир│Ар▓░р▓╛р▓╡р▓░р▓┐ р▓ир▓┐р▓пр▓ор▓┐р▓др▓╡р▓╛р▓Чр▓┐р▓░р▓▓р▓┐.", },
    Potato: { explanation: "р▓Жр▓▓р│Вр▓Чр▓бр│Нр▓бр│Ж р▓др▓Вр▓кр│Б р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓ор▓др│Нр▓др│Б р▓ир│Ар▓░р│Бр▓Хр▓╕р▓┐р▓д р▓ор▓гр│Нр▓гр▓┐р▓ир▓▓р│Нр▓▓р▓┐ р▓Йр▓др│Нр▓др▓о.", fertilizerAdvice: "р▓ир│Жр▓бр│Бр▓╡р▓╛р▓Ч NPK, р▓мр▓│р▓┐р▓Х р▓Яр▓╛р▓кр│Н р▓бр│Нр▓░р│Жр▓╕р▓┐р▓Вр▓Чр│Н.", irrigationAdvice: "р▓Хр▓Вр▓ж р▓ир▓┐р▓░р│Нр▓ор▓╛р▓гр▓жр▓▓р│Нр▓▓р▓┐ р▓др│Зр▓╡ р▓Зр▓░р▓▓р▓┐.", },
    Groundnut: { explanation: "р▓Хр▓бр▓▓р│Жр▓Хр▓╛р▓пр▓┐ р▓ор▓░р▓│р│Б р▓▓р│Лр▓о р▓ор▓др│Нр▓др│Б р▓мр▓┐р▓╕р▓┐ р▓кр▓░р▓┐р▓╕р│Нр▓ер▓┐р▓др▓┐р▓пр▓▓р│Нр▓▓р▓┐ р▓Ър│Жр▓ир│Нр▓ир▓╛р▓Чр▓┐р▓жр│Ж.", fertilizerAdvice: "р▓Ьр▓┐р▓кр│Нр▓╕р▓В, р▓кр│Кр▓Яр▓╛р▓╖р│Н; N р▓ор▓┐р▓др▓┐.", irrigationAdvice: "р▓╣р│В/р▓Хр▓╛р▓пр▓┐ р▓нр▓░р│Нр▓др▓┐ р▓╡р│Зр▓│р│Ж р▓╕р▓о р▓др│Зр▓╡.", },
  },
  te: {
    Wheat: { explanation: "р░Чр▒Лр░зр▒Бр░о р░ор░┐р░д р░ир▒Ир░Яр▒Нр░░р▒Лр░Ьр░ир▒Н, р░╕р░о pH р░▓р▒Л р░мр░╛р░Чр░╛ р░кр▒Жр░░р▒Бр░Чр▒Бр░др▒Бр░Вр░жр░┐.", fertilizerAdvice: "р░╕р░ор░др▒Бр░▓р▒Нр░п NPK; р░╡р░┐р░др▒Нр░др░и р░╕р░ор░пр░Вр░▓р▒Л DAP.", irrigationAdvice: "р░ор▒Бр░Цр▒Нр░п р░жр░╢р░▓р▒Нр░▓р▒Л р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓ р░Зр░╡р▒Нр░╡р░Вр░бр░┐." },
    Rice: { explanation: "р░мр░┐р░пр▒Нр░пр░В р░ир▒Ир░Яр▒Нр░░р▒Лр░Ьр░ир▒Н р░╕р░ор▒Гр░жр▒Нр░зр░┐р░Чр░╛, р░ир▒Ар░░р▒Б р░▓р░нр▒Нр░пр░ор▒Ир░и р░кр░░р░┐р░╕р▒Нр░ер░┐р░др▒Бр░▓р▒Нр░▓р▒Л р░кр▒Бр░╖р▒Нр░Яр░┐р░Чр░╛ р░кр▒Жр░░р▒Бр░Чр▒Бр░др▒Бр░Вр░жр░┐.", fertilizerAdvice: "р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░Ор░░р▒Бр░╡р▒Бр░▓р▒Б, 4:2:1 NPK.", irrigationAdvice: "р░кр▒Жр░░р▒Бр░Чр▒Бр░жр░▓р░Вр░др░╛ 2тАУ5р░╕р▒Жр░В.р░ор▒А р░ир▒Ар░░р▒Б р░Йр░Вр░Ър░Вр░бр░┐.", },
    Maize: { explanation: "р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░ир░Хр▒Б р░ор░Вр░Ър░┐ р░лр░╛р░╕р▒Нр░лр░░р░╕р▒Н, р░╕р░о pH р░Ер░╡р░╕р░░р░В.", fertilizerAdvice: "р░╡р▒Жр░Ьр░┐р░Яр▒Зр░Яр░┐р░╡р▒Н р░Чр▒Нр░░р▒Лр░др▒НтАМр░▓р▒Л р░Ер░зр░┐р░Х р░ир▒Ир░Яр▒Нр░░р▒Лр░Ьр░ир▒Н.", irrigationAdvice: "р░ир░┐р░пр░ор░┐р░д р░кр░╛р░░р▒Бр░жр░▓.", },
    "Pulses (Lentils)": { explanation: "р░кр░кр▒Нр░кр▒Бр░▓р▒Б р░╕р▒Нр░╡р░пр░В р░ир▒Ир░Яр▒Нр░░р▒Лр░Ьр░ир▒Н р░╕р▒Нр░ер░┐р░░р▒Ар░Хр░░р░┐р░╕р▒Нр░др░╛р░пр░┐; р░др░Яр░╕р▒Нр░е pH р░Зр░╖р▒Нр░Яр░В.", fertilizerAdvice: "р░др░Хр▒Нр░Хр▒Бр░╡ N; P, K р░кр▒И р░жр▒Гр░╖р▒Нр░Яр░┐.", irrigationAdvice: "р░кр▒Бр░╖р▒Нр░кр░┐р░Вр░Ър▒Зр░Яр░кр▒Нр░кр▒Бр░бр▒Б/р░кр░╛р░бр▒Н р░лр░┐р░▓р▒Нр░▓р░┐р░Вр░Чр▒НтАМр░▓р▒Л р░др░Хр▒Нр░Хр▒Бр░╡ р░ир▒Ар░░р▒Б.", },
    Soybean: { explanation: "р░╕р▒Лр░пр░╛р░мр▒Ар░ир▒Н р░ор░Вр░Ър░┐ р░бр▒Нр░░р▒Ир░ир▒Зр░Ьр▒Бр░др▒Л р░Йр░ир▒Нр░и р░ор░Яр▒Нр░Яр░┐р░▓р▒Л р░кр▒Жр░░р▒Бр░Чр▒Бр░др▒Бр░Вр░жр░┐.", fertilizerAdvice: "р░др░Хр▒Нр░Хр▒Бр░╡ N, р░ор░зр▒Нр░п P, K.", irrigationAdvice: "р░кр▒Бр░╖р▒Нр░кр░В/р░кр░╛р░бр▒Н р░╕р░ор░пр░Вр░▓р▒Л р░ир▒Ар░░р▒Б р░Ор░Вр░др▒Л р░ор▒Бр░Цр▒Нр░пр░В.", },
    Cotton: { explanation: "р░кр░др▒Нр░др░┐р░Хр░┐ р░Ер░зр░┐р░Х р░кр▒Кр░Яр░╛р░╖р▒Н, р░╕р░░р░┐р░кр░б р░ир▒Ар░░р▒Б р░Ер░╡р░╕р░░р░В.", fertilizerAdvice: "р░мр▒Лр░▓р▒Н р░бр▒Жр░╡р░▓р░кр▒Нр░ор▒Жр░Вр░Яр▒НтАМр░▓р▒Л K-р░░р░┐р░Ър▒Н р░Ор░░р▒Бр░╡р▒Бр░▓р▒Б.", irrigationAdvice: "р░Ер░зр░┐р░Х (700тАУ1300р░ор░┐.р░ор▒А) р░ир▒Ар░Яр░┐ р░Ер░╡р░╕р░░р░В.", },
    Sugarcane: { explanation: "р░Ър▒Жр░░р░Хр▒Б р░жр▒Ар░░р▒Нр░Шр░Хр░╛р░▓ р░кр░Вр░Я; р░Ер░зр░┐р░Х р░ир▒Ар░░р▒Б/р░кр▒Лр░╖р░Хр░╛р░▓р▒Б р░Ер░╡р░╕р░░р░В.", fertilizerAdvice: "р░╕р░ор░др▒Бр░▓р▒Нр░п NPK, р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░Ор░░р▒Бр░╡р▒Б р░Ър▒Зр░░р▒Нр░Ър░Вр░бр░┐.", irrigationAdvice: "р░лр░░р▒Л р░Зр░░р░┐р░Чр▒Зр░╖р░ир▒Н р░кр░жр▒Нр░зр░др░┐р░ир░┐ р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър░Вр░бр░┐.", },
    Potato: { explanation: "р░мр░Вр░Чр░╛р░│р░╛р░жр▒Бр░Вр░к р░Ър░▓р▒Нр░▓р░ир░┐ р░╡р░╛р░др░╛р░╡р░░р░гр░В, р░бр▒Нр░░р▒Ир░ир▒Зр░Ьр▒Н р░Йр░ир▒Нр░и р░ор░Яр▒Нр░Яр░┐ р░Зр░╖р▒Нр░Яр░В.", fertilizerAdvice: "р░ир░╛р░Яр▒З р░╕р░ор░пр░Вр░▓р▒Л NPK, р░др░░р▒Нр░╡р░╛р░д р░Яр░╛р░кр▒Н р░бр▒Нр░░р▒Жр░╕р▒Нр░╕р░┐р░Вр░Чр▒Н.", irrigationAdvice: "р░Яр▒Нр░пр▒Вр░мр░░р▒Н р░Пр░░р▒Нр░кр░бр▒З р░╕р░ор░пр░Вр░▓р▒Л р░др▒Зр░о р░Йр░Вр░Ър░Вр░бр░┐.", },
    Groundnut: { explanation: "р░╡р▒Зр░░р▒Бр░╢р▒Жр░ир░Ч р░Зр░╕р▒Бр░Х р░▓р▒Лр░пр░В, р░╡р▒Зр░бр░┐ р░кр░░р░┐р░╕р▒Нр░ер░┐р░др▒Бр░▓р▒Нр░▓р▒Л р░мр░╛р░Чр▒Бр░Вр░Яр▒Бр░Вр░жр░┐.", fertilizerAdvice: "р░Ьр░┐р░кр▒Нр░╕р░В, р░кр▒Кр░Яр░╛р░╖р▒Н; N р░кр░░р░┐р░ор░┐р░др░В.", irrigationAdvice: "р░кр▒Бр░╖р▒Нр░кр░В/р░кр░╛р░бр▒Н р░лр░┐р░▓р▒Нр░▓р░┐р░Вр░Чр▒НтАМр░▓р▒Л р░╕р░ор░╛р░и р░др▒Зр░о.", },
  },
  ml:
    { Wheat: { explanation: "р┤Чр╡Лр┤др┤ор╡Нр┤кр╡Н р┤ор┤┐р┤др┤ор┤╛р┤п р┤ир╡Ир┤Яр╡Нр┤░р┤Ьр┤ир╡Бр┤В р┤╕р┤ор┤др╡Бр┤▓р┤┐р┤д pH р┤пр┤┐р┤▓р╡Бр┤В р┤ир┤ир╡Нр┤ир┤╛р┤пр┤┐ р┤╡р┤│р┤░р╡Бр┤В.", fertilizerAdvice: "р┤╕р┤ор┤др╡Бр┤▓р┤┐р┤д NPK; р┤╡р┤┐р┤др┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤ор╡Нр┤кр╡Лр╡╛ DAP.", irrigationAdvice: "р┤кр╡Нр┤░р┤зр┤╛р┤и р┤Шр┤Яр╡Нр┤Яр┤Щр╡Нр┤Щр┤│р┤┐р╡╜ р┤Ьр┤▓р┤╕р╡Зр┤Ър┤ир┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х." },
      Rice: { explanation: "р┤Ер┤░р┤┐ р┤ир╡Ир┤Яр╡Нр┤░р┤Ьр╡╗ р┤╕р┤ор╡Гр┤жр╡Нр┤зр┤╡р╡Бр┤В р┤Ьр┤▓ р┤▓р┤╛р┤нр╡Нр┤пр┤др┤пр╡Бр┤│р╡Нр┤│ р┤╕р┤╛р┤╣р┤Ър┤░р╡Нр┤пр┤Щр╡Нр┤Щр┤│р┤┐р┤▓р╡Бр┤В р┤╡р┤│р┤░р╡Бр┤В.", fertilizerAdvice: "р┤╕р╡Ир┤╡ р┤╡р┤│р┤╡р╡Бр┤В 4:2:1 NPK р┤Йр┤В р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.", irrigationAdvice: "р┤╡р┤│р╡╝р┤Ър╡Нр┤Ъ р┤ор╡Бр┤┤р╡Бр┤╡р╡╗ 2тАУ5 р┤╕р╡Ж.р┤ор╡А р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤ир┤┐р┤▓р┤ир┤┐р╡╝р┤др╡Нр┤др╡Бр┤Х.", },
      Maize: { explanation: "р┤Ър╡Лр┤│р┤В р┤ор┤┐р┤Хр┤Ър╡Нр┤Ъ р┤лр╡Лр┤╕р╡Нр┤лр┤▒р┤╕р╡Бр┤В р┤╕р┤о pH р┤пр╡Бр┤В р┤Жр┤╡р┤╢р╡Нр┤пр┤ор┤╛р┤гр╡Н.", fertilizerAdvice: "р┤╕р┤╕р╡Нр┤пр┤╡р┤│р╡╝р┤Ър╡Нр┤Ър┤пр┤┐р╡╜ р┤Йр┤пр╡╝р┤ир╡Нр┤и р┤ир╡Ир┤Яр╡Нр┤░р┤Ьр╡╗.", irrigationAdvice: "р┤Хр╡Нр┤░р┤ор┤ор┤╛р┤п р┤Ьр┤▓р┤╕р╡Зр┤Ър┤ир┤В.", },
      "Pulses (Lentils)": { explanation: "р┤кр┤пр╡╝р┤╡р╡╝р┤Чр┤Щр╡Нр┤Щр╡╛ р┤ир╡Ир┤Яр╡Нр┤░р┤Ьр╡╗ р┤╕р╡Нр┤╡р┤пр┤В р┤╕р╡Нр┤ер┤┐р┤░р┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤др╡Нр┤др╡Бр┤В; р┤ир╡Нр┤пр╡Вр┤Яр╡Нр┤░р╡╜ pH р┤Зр┤╖р╡Нр┤Яр┤В.", fertilizerAdvice: "р┤Хр╡Бр┤▒р┤Юр╡Нр┤Ю N; P, K р┤╢р╡Нр┤░р┤жр╡Нр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.", irrigationAdvice: "р┤кр╡Вр┤Хр╡Нр┤Хр╡╛/р┤Хр┤╛р┤пр╡Н р┤ир┤┐р┤▒р┤пр╡Нр┤Хр╡Нр┤Хр╡╜ р┤╕р┤ор┤пр┤др╡Нр┤др╡Н р┤▓р┤Шр╡Б р┤Ьр┤▓р┤╕р╡Зр┤Ър┤ир┤В.", },
      Soybean: { explanation: "р┤╕р╡Лр┤пр┤╛р┤мр╡Ар╡╗ р┤ир┤▓р╡Нр┤▓ р┤бр╡Нр┤░р╡Жр┤пр┤┐р┤ир╡Зр┤Ьр╡Н р┤Йр┤│р╡Нр┤│ р┤ор┤гр╡Нр┤гр┤┐р╡╜ р┤╡р┤│р┤░р╡Бр┤В.", fertilizerAdvice: "р┤Хр╡Бр┤▒р┤Юр╡Нр┤Ю N, р┤ор┤┐р┤др┤ор┤╛р┤п P, K.", irrigationAdvice: "р┤кр╡Вр┤Хр╡Нр┤Хр┤│р┤┐р┤▓р╡Бр┤В р┤Хр┤╛р┤пр╡Н р┤ир┤┐р┤▒р┤пр╡Нр┤Хр╡Нр┤Хр┤▓р┤┐р┤▓р╡Бр┤В р┤Ьр┤▓р┤В р┤ир┤┐р╡╝р┤мр┤ир╡Нр┤зр┤В.", },
      Cotton: { explanation: "р┤кр┤др╡Нр┤др┤┐ р┤ир┤╛р┤░р┤┐р┤ир╡Н р┤Йр┤пр╡╝р┤ир╡Нр┤и р┤кр╡Кр┤Яр╡Нр┤Яр┤╛р┤╖р╡Бр┤В р┤ор┤др┤┐р┤пр┤╛р┤п р┤╡р╡Жр┤│р╡Нр┤│р┤╡р╡Бр┤В р┤╡р╡Зр┤гр┤В.", fertilizerAdvice: "р┤мр╡Лр╡╛ р┤╡р┤┐р┤Хр┤╕р┤ир┤др╡Нр┤др┤┐р╡╜ K-р┤╕р┤ор╡Гр┤жр╡Нр┤зр┤ор┤╛р┤п р┤╡р┤│р┤В.", irrigationAdvice: "р┤Йр┤пр╡╝р┤ир╡Нр┤и (700тАУ1300р┤ор┤┐р┤ор╡А) р┤Ьр┤▓р┤╛р┤╡р┤╢р╡Нр┤пр┤Хр┤д.", },
      Sugarcane: { explanation: "р┤Хр┤░р┤┐р┤ор╡Нр┤кр╡Н р┤жр╡Ар╡╝р┤Шр┤Хр┤╛р┤▓ р┤╡р┤┐р┤│; р┤Хр╡Вр┤Яр╡Бр┤др┤▓р╡Бр┤│р╡Нр┤│ р┤Ьр┤▓/р┤кр╡Лр┤╖р┤Х р┤Жр┤╡р┤╢р╡Нр┤пр┤В.", fertilizerAdvice: "р┤╕р┤ор┤др╡Бр┤▓р┤┐р┤д NPK, р┤Ьр╡Ир┤╡р┤╡р┤│р┤В р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х.", irrigationAdvice: "р┤Хр╡Бр┤┤р┤┐р┤╡р┤пр╡╜ р┤Ьр┤▓р┤╕р╡Зр┤Ър┤ир┤В р┤др╡Бр┤Яр┤░р╡Бр┤Х.", },
      Potato: { explanation: "р┤Йр┤░р╡Бр┤│р┤Хр┤┐р┤┤р┤Щр╡Нр┤Щр╡Н р┤др┤гр╡Бр┤др╡Нр┤д р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤пр╡Бр┤В р┤бр╡Нр┤░р╡Жр┤пр┤┐р┤ир╡Зр┤Ьр╡Н р┤Йр┤│р╡Нр┤│ р┤ор┤гр╡Нр┤гр╡Бр┤В р┤Зр┤╖р╡Нр┤Яр┤В.", fertilizerAdvice: "р┤ир┤Яр╡Нр┤Яр╡Н р┤╕р┤ор┤пр┤др╡Нр┤др╡Н NPK, р┤кр┤┐р┤ир╡Нр┤ир╡Ар┤Яр╡Н р┤Яр╡Лр┤кр╡Н р┤бр╡Нр┤░р┤╕р╡Нр┤╕р┤┐р┤Вр┤Чр╡Н.", irrigationAdvice: "р┤Хр┤ир╡Нр┤зр┤Щр╡Нр┤Щр╡╛ р┤░р╡Вр┤кр┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤ор╡Нр┤кр╡Лр╡╛ р┤Ир╡╝р┤кр╡Нр┤кр┤В р┤Хр╡Ир┤╡р┤╢р┤В р┤╡р┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤Х.", },
      Groundnut: { explanation: "р┤╡р╡Зр╡╝р┤Хр┤Яр┤▓ р┤ор┤гр╡╜-р┤▓р╡Лр┤В р┤ор┤гр╡Нр┤гр┤┐р┤▓р╡Бр┤В р┤Ър╡Вр┤Яр┤┐р┤▓р╡Бр┤В р┤ор┤┐р┤Хр┤Ър╡Нр┤Ър┤др╡Н.", fertilizerAdvice: "р┤Ьр┤┐р┤кр╡Нр┤╕р┤В, р┤кр╡Кр┤Яр╡Нр┤Яр┤╛р┤╖р╡Н; N р┤ир┤┐р┤пр┤ир╡Нр┤др╡Нр┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.", irrigationAdvice: "р┤кр╡В/р┤кр╡Лр┤бр╡Н р┤ир┤┐р┤▒р┤пр╡Нр┤Хр╡Нр┤Хр┤▓р┤┐р╡╜ р┤др╡Бр┤▓р╡Нр┤п р┤Ир╡╝р┤кр╡Нр┤кр┤В.", },
    },
};

// Helper to translate a crop's text fields with fallback to originals
function translateCropContent(
  lang: keyof typeof cropNameTranslations,
  name: string,
  fields: { explanation: string; fertilizerAdvice: string; irrigationAdvice: string }
) {
  const m = cropContentTranslations[lang]?.[name];
  return {
    explanation: m?.explanation ?? fields.explanation,
    fertilizerAdvice: m?.fertilizerAdvice ?? fields.fertilizerAdvice,
    irrigationAdvice: m?.irrigationAdvice ?? fields.irrigationAdvice,
  };
}

export default function Dashboard() {
  const { isAuthenticated } = useAuth();
  type Language = "en" | "hi" | "ta" | "bn" | "ur" | "kn" | "te" | "ml";
  const [language, setLanguage] = useState<Language>("en");
  const [isListening, setIsListening] = useState(false);
  const [isOffline, setIsOffline] = useState(!navigator.onLine);
  const [hasRequestedRecs, setHasRequestedRecs] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isLocating, setIsLocating] = useState(false);

  // Form state
  const [formData, setFormData] = useState({
    nitrogen: "",
    phosphorus: "",
    potassium: "",
    ph: "",
    soilMoisture: "",
    waterAvailability: "",
    location: "",
  });

  const [recommendations, setRecommendations] = useState(null as null | Array<{
    name: string;
    confidence: number;
    explanation: string;
    profitEstimate: number;
    waterUsage: string;
    fertilizerAdvice: string;
    irrigationAdvice: string;
  }>);
  type WeatherData = {
    temperature: number;
    humidity: number;
    rainfall: number;
    forecast: string;
    localTime?: string;
  };
  const [weatherData, setWeatherData] = useState<WeatherData | null>(null);
  
  const createRecommendation = useMutation(api.recommendations.createRecommendation);
  const userRecommendations = useQuery(api.recommendations.getRecommendations, {});
  // Fetch market prices for the sidebar (kept but we will render custom table)
  const marketPrices = useQuery(api.market.getMarketPrices, {});

  // Language translations (ensure const assertion)
  const translations = {
    en: {
      title: "KisanYatra: AI Crop Recommendation System",
      subtitle: "Get personalized crop recommendations based on your soil data",
      soilData: "Soil Data Input",
      nitrogen: "Nitrogen (N) - kg/ha",
      phosphorus: "Phosphorus (P) - kg/ha",
      potassium: "Potassium (K) - kg/ha",
      ph: "pH Level",
      soilMoisture: "Soil Moisture (%)",
      waterAvailability: "Water Availability (%)",
      location: "Location",
      getRecommendation: "Get Crop Recommendation",
      recommendations: "Recommended Crops",
      fertilizerAdvice: "Fertilizer Advice",
      irrigationAdvice: "Irrigation Advice",
      match: "match",
      marketPrices: "Market Prices",
      weather: "Weather Forecast",
      offline: "You are offline. Using cached data.",
      listening: "Listening...",
      speak: "Speak your input",
      connect: "Connect",
      chat: "Chat",
      contacts: "Contacts",
      enterMessage: "Type a message...",
      shareContact: "Share Contact",
      name: "Name",
      phone: "Phone",
      note: "Note (optional)",
      post: "Post",
      save: "Save",
      stateRoom: "State room",
    },
    hi: {
      title: "KisanYatra: рдПрдЖрдИ рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдкреНрд░рдгрд╛рд▓реА",
      subtitle: "рдЕрдкрдиреЗ рдорд┐рдЯреНрдЯреА рдХреЗ рдбреЗрдЯрд╛ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╡реНрдпрдХреНрддрд┐рдЧрдд рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
      soilData: "рдорд┐рдЯреНрдЯреА рдбреЗрдЯрд╛ рдЗрдирдкреБрдЯ",
      nitrogen: "рдирд╛рдЗрдЯреНрд░реЛрдЬрди (N) - рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░",
      phosphorus: "рдлрд╛рд╕реНрдлреЛрд░рд╕ (P) - рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░",
      potassium: "рдкреЛрдЯреЗрд╢рд┐рдпрдо (K) - рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░",
      ph: "рдкреАрдПрдЪ рд╕реНрддрд░",
      soilMoisture: "рдорд┐рдЯреНрдЯреА рдХреА рдирдореА (%)",
      waterAvailability: "рдкрд╛рдиреА рдХреА рдЙрдкрд▓рдмреНрдзрддрд╛ (%)",
      location: "рд╕реНрдерд╛рди",
      getRecommendation: "рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
      recommendations: "рд╕реБрдЭрд╛рдИ рдЧрдИ рдлрд╕рд▓реЗрдВ",
      fertilizerAdvice: "рдЙрд░реНрд╡рд░рдХ рд╕рд▓рд╛рд╣",
      irrigationAdvice: "рд╕рд┐рдВрдЪрд╛рдИ рд╕рд▓рд╛рд╣",
      match: "рдореЗрд▓",
      marketPrices: "рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп",
      weather: "рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
      offline: "рдЖрдк рдСрдлрд╝рд▓рд╛рдЗрди рд╣реИрдВред рдХреИрд╢реНрдб рдбреЗрдЯрд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд░рд╣реЗ рд╣реИрдВред",
      listening: "рд╕реБрди рд░рд╣рд╛ рд╣реИ...",
      speak: "рдЕрдкрдирд╛ рдЗрдирдкреБрдЯ рдмреЛрд▓реЗрдВ",
      connect: "рдХрдиреЗрдХреНрдЯ",
      chat: "рдЪреИрдЯ",
      contacts: "рд╕рдВрдкрд░реНрдХ",
      enterMessage: "рд╕рдВрджреЗрд╢ рд▓рд┐рдЦреЗрдВ...",
      shareContact: "рд╕рдВрдкрд░реНрдХ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ",
      name: "Name",
      phone: "Phone",
      note: "Note (optional)",
      post: "Post",
      save: "Save",
      stateRoom: "State room",
    },
    ta: {
      title: "KisanYatra: роПроР рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИ роЕроорпИрокрпНрокрпБ",
      subtitle: "роЙроЩрпНроХро│рпН роорогрпН родро░ро╡ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН родройро┐рокрпНрокропройрпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН",
      soilData: "роорогрпН родро░ро╡рпБ",
      nitrogen: "роирпИроЯрпНро░роЬройрпН (N) - роХро┐/ро╣рпЖ",
      phosphorus: "рокро╛ро╕рпНрокро░ро╕рпН (P) - роХро┐/ро╣рпЖ",
      potassium: "рокрпКроЯрпНроЯро╛роЪро┐ропроорпН (K) - роХро┐/ро╣рпЖ",
      ph: "pH роиро┐ро▓рпИ",
      soilMoisture: "роорогрпН роИро░рокрпНрокродроорпН (%)",
      waterAvailability: "родрогрпНрогрпАро░рпН роХро┐роЯрпИроХрпНроХрпБроорпН (%)",
      location: "роЗроЯроорпН",
      getRecommendation: "рокро░ро┐роирпНродрпБро░рпИ рокрпЖро▒",
      recommendations: "рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ рокропро┐ро░рпНроХро│рпН",
      fertilizerAdvice: "роЙро░ роЖро▓рпЛроЪройрпИ",
      irrigationAdvice: "роирпАро░рпНрокрпНрокро╛роЪрой роЖро▓рпЛроЪройрпИ",
      match: "рокрпКро░рпБроирпНродро▓рпН",
      marketPrices: "роЪроирпНродрпИ ро╡ро┐ро▓рпИ",
      weather: "ро╡ро╛ройро┐ро▓рпИ",
      offline: "роирпАроЩрпНроХро│рпН роЖроГрокрпНро▓рпИройро┐ро▓рпН роЙро│рпНро│рпАро░рпНроХро│рпН.",
      listening: "роХрпЗроЯрпНроХро┐ро▒родрпБ...",
      speak: "роЙроЩрпНроХро│рпН роЙро│рпНро│рпАроЯрпНроЯрпИ рокрпЗроЪрпБроЩрпНроХро│рпН",
      connect: "роЗрогрпИ",
      chat: "роЕро░роЯрпНроЯрпИ",
      contacts: "родрпКроЯро░рпНрокрпБроХро│рпН",
      enterMessage: "роЪрпЖропрпНродро┐ роОро┤рпБродро╡рпБроорпН...",
      shareContact: "родрпКроЯро░рпНрокрпИ рокроХро┐ро░рпН",
      name: "рокрпЖропро░рпН",
      phone: "рокрпЗроЪро┐",
      note: "Note (optional)",
      post: "Post",
      save: "Save",
      stateRoom: "рооро╛роиро┐ро▓ роЕро▒рпИ",
    },
    bn: {
      title: "KisanYatra: ржПржЖржЗ ржлрж╕рж▓ рж╕рзБржкрж╛рж░рж┐рж╢ ржмрзНржпржмрж╕рзНржерж╛",
      subtitle: "ржорж╛ржЯрж┐рж░ ржбрзЗржЯрж╛рж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржмрзНржпржХрзНрждрж┐ржЧржд рж╕рзБржкрж╛рж░рж┐рж╢",
      soilData: "ржорж╛ржЯрж┐рж░ рждржерзНржп",
      nitrogen: "ржирж╛ржЗржЯрзНрж░рзЛржЬрзЗржи (N) - ржХрзЗржЬрж┐/рж╣рзЗржГ",
      phosphorus: "ржлрж╛рж╕рзНржлрж░рж╛рж╕ (P) - ржХрзЗржЬрж┐/рж╣рзЗржГ",
      potassium: "ржкржЯрж╛рж╢рж┐ржпрж╝рж╛ржо (K) - ржХрзЗржЬрж┐/рж╣рзЗржГ",
      ph: "pH рж╕рзНрждрж░",
      soilMoisture: "ржорж╛ржЯрж┐рж░ ржЖрж░рзНржжрзНрж░рждрж╛ (%)",
      waterAvailability: "ржЬрж▓рзЗрж░ ржкрзНрж░рж╛ржкрзНржпрждрж╛ (%)",
      location: "ржЕржмрж╕рзНржерж╛ржи",
      getRecommendation: "ржлрж╕рж▓ рж╕рзБржкрж╛рж░рж┐рж╢ ржкрж╛ржи",
      recommendations: "ржкрзНрж░рж╕рзНрждрж╛ржмрж┐ржд ржлрж╕рж▓",
      fertilizerAdvice: "рж╕рж╛рж░ ржкрж░рж╛ржорж░рзНрж╢",
      irrigationAdvice: "рж╕рзЗржЪ ржкрж░рж╛ржорж░рзНрж╢",
      match: "ржорж┐рж▓",
      marketPrices: "ржмрж╛ржЬрж╛рж░ ржорзВрж▓рзНржп",
      weather: "ржЖржмрж╣рж╛ржУржпрж╝рж╛",
      offline: "ржЖржкржирж┐ ржЕржлрж▓рж╛ржЗржиред",
      listening: "рж╢рзБржиржЫрзЗ...",
      speak: "ржЖржкржирж╛рж░ ржЗржиржкрзБржЯ ржмрж▓рзБржи",
      connect: "рж╕ржВржпрзБржХрзНржд рж╣рзЛржи",
      chat: "ржЪрзНржпрж╛ржЯ",
      contacts: "ржпрзЛржЧрж╛ржпрзЛржЧ",
      enterMessage: "ржмрж╛рж░рзНрждрж╛ рж▓рж┐ржЦрзБржи...",
      shareContact: "ржпрзЛржЧрж╛ржпрзЛржЧ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи",
      name: "ржирж╛ржо",
      phone: "ржлрзЛржи",
      note: "ржирзЛржЯ (ржРржЪрзНржЫрж┐ржХ)",
      post: "ржкрзЛрж╕рзНржЯ",
      save: "рж╕ржВрж░ржХрзНрж╖ржг",
      stateRoom: "рж░рж╛ржЬрзНржп ржХржХрзНрж╖",
    },
    ur: {
      title: "KisanYatra: ╪з█Т ╪в╪ж█М ┘Б╪╡┘Д ┌й█М ╪│┘Б╪з╪▒╪┤╪з╪к",
      subtitle: "╪в┘╛ ┌й█М ┘Е┘╣█М ┌й█Т ┌И█М┘╣╪з ┘╛╪▒ ┘Е╪и┘Ж█М ╪░╪з╪к█М ╪│┘Б╪з╪▒╪┤╪з╪к",
      soilData: "┘Е┘╣█М ┌й█Т ┌И█М┘╣╪з",
      nitrogen: "┘Ж╪з╪ж┘╣╪▒┘И╪м┘Ж (N) - ┌й┘Д┘И/█Б█М┌й┘╣╪▒",
      phosphorus: "┘Б╪з╪│┘Б┘И╪▒╪│ (P) - ┌й┘Д┘И/█Б█М┌й┘╣╪▒",
      potassium: "┘╛┘И┘╣╪з╪┤█М┘Е (K) - ┌й┘Д┘И/█Б█М┌й┘╣╪▒",
      ph: "pH ╪│╪╖╪н",
      soilMoisture: "┘Е┘╣█М ┌й█М ┘Ж┘Е█М (%)",
      waterAvailability: "┘╛╪з┘Ж█М ┌й█М ╪п╪│╪к█М╪з╪и█М (%)",
      location: "┘Е┘В╪з┘Е",
      getRecommendation: "┘Б╪╡┘Д ┌й█М ╪│┘Б╪з╪▒╪┤ ╪н╪з╪╡┘Д ┌й╪▒█М┌║",
      recommendations: "╪│┘Б╪з╪▒╪┤ ┌й╪▒╪п█Б ┘Б╪╡┘Д█М┌║",
      fertilizerAdvice: "┌й┌╛╪з╪п ┘Е╪┤┘И╪▒█Б",
      irrigationAdvice: "╪в╪и┘╛╪з╪┤█М ┘Е╪┤┘И╪▒█Б",
      match: "┘Е█М┌Ж",
      marketPrices: "╪и╪з╪▓╪з╪▒ ┘В█М┘Е╪к█М┌║",
      weather: "┘Е┘И╪│┘Е",
      offline: "╪в┘╛ ╪в┘Б ┘Д╪з╪ж┘Ж █Б█М┌║█Ф",
      listening: "╪│┘Ж ╪▒█Б╪з █Б█Т...",
      speak: "╪з┘╛┘Ж╪з ╪з┘Ж ┘╛┘╣ ╪и┘И┘Д█М┌║",
      connect: "╪▒╪з╪и╪╖█Б",
      chat: "┌Ж█М┘╣",
      contacts: "╪▒╪з╪и╪╖█Т",
      enterMessage: "┘╛█М╪║╪з┘Е ┘Д┌й┌╛█М┌║...",
      shareContact: "╪▒╪з╪и╪╖█Б ╪┤█М╪ж╪▒ ┌й╪▒█М┌║",
      name: "┘Ж╪з┘Е",
      phone: "┘Б┘И┘Ж",
      note: "┘Ж┘И┘╣ (╪з╪о╪к█М╪з╪▒█М)",
      post: "┘╛┘И╪│┘╣",
      save: "┘Е╪н┘Б┘И╪╕ ┌й╪▒█М┌║",
      stateRoom: "╪▒█М╪з╪│╪к ┌й┘Е╪▒█Б",
    },
    kn: {
      title: "KisanYatra: р▓Ор▓Р р▓мр│Жр▓│р│Ж р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б р▓╡р│Нр▓пр▓╡р▓╕р│Нр▓ер│Ж",
      subtitle: "р▓ир▓┐р▓ор│Нр▓о р▓ор▓гр│Нр▓гр▓┐р▓и р▓бр│Зр▓Яр▓╛ р▓Жр▓зр▓╛р▓░р▓┐р▓д р▓╡р│Ир▓пр▓Хр│Нр▓др▓┐р▓Х р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р│Б",
      soilData: "р▓ор▓гр│Нр▓гр▓┐р▓и р▓бр│Зр▓Яр▓╛",
      nitrogen: "р▓ир│Ир▓Яр│Нр▓░р│Лр▓Ьр▓ир│Н (N) - р▓Хр│Жр▓Ьр▓┐/р▓╣р│Ж",
      phosphorus: "р▓лр▓╛р▓╕р│Нр▓лр▓░р▓╕р│Н (P) - р▓Хр│Жр▓Ьр▓┐/р▓╣р│Ж",
      potassium: "р▓кр│Кр▓Яр▓╛р▓╖р▓┐р▓пр▓В (K) - р▓Хр│Жр▓Ьр▓┐/р▓╣р│Ж",
      ph: "pH р▓ор▓Яр│Нр▓Я",
      soilMoisture: "р▓ор▓гр│Нр▓гр▓┐р▓и р▓др│Зр▓╡р▓╛р▓Вр▓╢ (%)",
      waterAvailability: "р▓ир│Ар▓░р│Б р▓▓р▓нр│Нр▓пр▓др│Ж (%)",
      location: "р▓╕р│Нр▓ер▓│",
      getRecommendation: "р▓мр│Жр▓│р│Ж р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐",
      recommendations: "р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б р▓ор▓╛р▓бр▓┐р▓ж р▓мр│Жр▓│р│Жр▓Чр▓│р│Б",
      fertilizerAdvice: "р▓░р▓╕р▓Чр│Кр▓мр│Нр▓мр▓░ р▓╕р▓▓р▓╣р│Ж",
      irrigationAdvice: "р▓ир│Ар▓░р▓╛р▓╡р▓░р▓┐ р▓╕р▓▓р▓╣р│Ж",
      match: "р▓╣р│Кр▓Вр▓жр▓┐р▓Хр│Ж",
      marketPrices: "р▓ор▓╛р▓░р│Бр▓Хр▓Яр│Нр▓Яр│Ж р▓мр│Жр▓▓р│Жр▓Чр▓│р│Б",
      weather: "р▓Хр▓╛р▓▓р▓╛р▓╡р▓╕р│Нр▓е",
      offline: "р▓ир│Ар▓╡р│Б р▓Жр▓лр│НтАМр▓▓р│Ир▓ир│НтАМ р▓Зр▓жр│Нр▓жр│Ар▓░р▓┐.",
      listening: "р▓Хр│Жр▓│р│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
      speak: "р▓ир▓┐р▓ор│Нр▓о р▓Зр▓ир│НтАМinpр│Бр▓Яр│Н р▓ор▓╛р▓др▓ир▓╛р▓бр▓┐",
      connect: "р▓Хр▓ир│Жр▓Хр│Нр▓Яр│Н",
      chat: "р▓Ър▓╛р▓Яр│Н",
      contacts: "р▓╕р▓Вр▓кр▓░р│Нр▓Хр▓Чр▓│р│Б",
      enterMessage: "р▓╕р▓Вр▓жр│Зр▓╢р▓╡р▓ир│Нр▓ир│Б р▓мр▓░р│Жр▓пр▓┐р▓░р▓┐...",
      shareContact: "р▓╕р▓Вр▓кр▓░р│Нр▓Хр▓╛р▓ир│Нр▓ир▓┐ р┤кр┤Щр╡Нр┤Хр▓┐р▓Яр│Бр▓Х",
      name: "р▓╣р│Жр▓╕р▓░р│Б",
      phone: "р▓лр│Лр▓ир│Н",
      note: "р▓Чр▓ор▓ир▓┐р▓Х (р▓Рр▓Ър│Нр▓Ыр▓┐р▓Хр▓В)",
      post: "Post",
      save: "р▓Йр▓│р▓┐р▓╕р▓┐",
      stateRoom: "р▓░р▓╛р▓Ьр│Нр▓п р▓Хр│Кр▓ар▓бр▓┐",
    },
    te: {
      title: "KisanYatra: р░Пр░Р р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б р░╡р▒Нр░пр░╡р░╕р▒Нр░д",
      subtitle: "р░ор▒А р░ир▒Зр░▓ р░бр▒Зр░Яр░╛ р░Жр░зр░╛р░░р░Вр░Чр░╛ р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р▒Б",
      soilData: "р░ир▒Зр░▓ р░бр▒Зр░Яр░╛",
      nitrogen: "р░ир▒Ир░Яр▒Нр░░р▒Лр░Ьр░ир▒Н (N) - р░Хр▒Зр░Ьр▒А/р░╣р▒Ж",
      phosphorus: "р░лр░╛р░╕р▒Нр░лр░░р░╕р▒Н (P) - р░Хр▒Зр░Ьр▒А/р░╣р▒Ж",
      potassium: "р░кр▒Кр░Яр░╛р░╖р░┐р░пр░В (K) - р░Хр▒Зр░Ьр▒А/р░╣р▒Ж",
      ph: "pH р░╕р▒Нр░ер░╛р░пр░┐",
      soilMoisture: "р░ир▒Зр░▓ р░др▒Зр░о (%)",
      waterAvailability: "р░ир▒Ар░Яр░┐ р░▓р░нр▒Нр░пр░д (%)",
      location: "р░╕р▒Нр░ер░╛р░ир░В",
      getRecommendation: "р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐",
      recommendations: "р░╕р░┐р░лр░╛р░░р░╕р▒Б р░Ър▒Зр░╕р░┐р░и р░кр░Вр░Яр░▓р▒Б",
      fertilizerAdvice: "р░Ор░░р▒Бр░╡р▒Б р░╕р░▓р░╣р░╛",
      irrigationAdvice: "р░кр░╛р░░р▒Бр░жр░▓ р░╕р░▓р░╣р░╛",
      match: "р░кр▒Кр░Вр░др░и",
      marketPrices: "р░ор░╛р░░р▒Бр░Хр░Яр▒Нр░Яр▒Ж р░мр▒Жр░▓р▒Жр░Чр░│р▒Б",
      weather: "р░╡р░╛р░др░╛р░╡р░░р░гр░В",
      offline: "р░ор▒Ар░░р▒Б р░Жр░лр▒НтАМр░▓р▒Ир░ир▒НтАМр░▓р▒Л р░Йр░ир▒Нр░ир░╛р░░р▒Б.",
      listening: "р░╡р░┐р░Вр░Яр▒Лр░Вр░жр░┐...",
      speak: "р░ор▒А р░Зр░ир▒НтАМр░кр▒Бр░Яр▒Н р░ор░╛р░Яр▒Нр░▓р░╛р░бр░Вр░бр░┐",
      connect: "р░Хр░ир▒Жр░Хр▒Нр░Яр▒Н",
      chat: "р░Ър░╛р░Яр▒Н",
      contacts: "р░╕р░Вр░кр░░р▒Нр░Хр░╛р░▓р▒Б",
      enterMessage: "р░╕р░Вр░жр▒Зр░╢р░В р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐...",
      shareContact: "р░╕р░Вр░кр░░р▒Нр░Хр░╛р░ир▒Нр░ир░┐ р░кр░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
      name: "р░кр▒Зр░░р▒Б",
      phone: "р░лр▒Лр░ир▒Н",
      note: "р░Чр░ор░ир░┐р░Х (р░Рр░Ър▒Нр░Ър░┐р░Хр░В)",
      post: "р░кр▒Лр░╕р▒Нр░Яр▒Н",
      save: "р░╕р▒Зр░╡р▒Н",
      stateRoom: "р░░р░╛р░╖р▒Нр░Яр▒Нр░░ р░Чр░жр░┐",
    },
    ml: {
      title: "KisanYatra: р┤Ор┤Р р┤╡р┤┐р┤│ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢ р┤╕р┤Вр┤╡р┤┐р┤зр┤╛р┤ир┤В",
      subtitle: "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤ор┤гр╡Нр┤гр╡Н р┤бр┤╛р┤▒р╡Нр┤▒р┤пр╡Ж р┤Ер┤Яр┤┐р┤╕р╡Нр┤ер┤╛р┤ир┤ор┤╛р┤Хр╡Нр┤Хр┤┐ р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤┐р┤Чр┤д р┤╡р┤┐р┤│ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛ р┤ир╡Зр┤Яр╡Бр┤Х",
      soilData: "р┤ор┤гр╡Нр┤гр╡Н р┤бр┤╛р┤▒р╡Нр┤▒ р┤Зр╡╗р┤кр╡Бр┤Яр╡Нр┤Яр╡Н",
      nitrogen: "р┤ир╡Ир┤Яр╡Нр┤░р┤Ьр╡╗ (N) - kg/ha",
      phosphorus: "р┤лр╡Лр┤╕р╡Нр┤лр┤▒р┤╕р╡Н (P) - kg/ha",
      potassium: "р┤кр╡Кр┤Яр╡Нр┤Яр┤╛р┤╖р╡Нр┤пр┤В (K) - kg/ha",
      ph: "pH р┤ир┤┐р┤▓",
      soilMoisture: "р┤ор┤гр╡Нр┤гр┤┐р┤▓р╡Ж р┤Ир╡╝р┤кр╡Нр┤кр┤В (%)",
      waterAvailability: "р┤Ьр┤▓ р┤▓р┤нр╡Нр┤пр┤д (%)",
      location: "р┤╕р╡Нр┤ер┤╛р┤ир┤В",
      getRecommendation: "р┤╡р┤┐р┤│ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢ р┤▓р┤нр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
      recommendations: "р┤╢р╡Бр┤кр┤╛р╡╝р┤╢ р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤и р┤╡р┤┐р┤│р┤Хр╡╛",
      fertilizerAdvice: "р┤╡р┤│р┤В р┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤В",
      irrigationAdvice: "р┤ир┤ир┤пр╡Нр┤Хр╡Нр┤Хр╡╜ р┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤В",
      match: "р┤кр╡Кр┤░р╡Бр┤др╡Нр┤др┤В",
      marketPrices: "р┤ор┤╛р╡╝р┤Хр╡Нр┤Хр┤▒р╡Нр┤▒р╡Н р┤╡р┤┐р┤▓р┤Хр╡╛",
      weather: "р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е",
      offline: "р┤ир┤┐╠Бр┤Щр╡Нр┤Щр╡╛ р┤Ур┤лр╡НтАМр┤▓р╡Ир╡╗ р┤Жр┤гр╡Н. р┤Хр┤╛р┤╖р╡Ж р┤Ър╡Жр┤пр╡Нр┤д р┤бр┤╛р┤▒р╡Нр┤▒ р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б.",
      listening: "р┤Хр╡Зр╡╛р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б...",
      speak: "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Зр╡╗р┤кр╡Бр┤Яр╡Нр┤Яр╡Н р┤╕р┤Вр┤╕р┤╛р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
      connect: "р┤Хр┤гр┤Хр╡Нр┤▒р╡Нр┤▒р╡Н",
      chat: "р┤Ър┤╛р┤▒р╡Нр┤▒р╡Н",
      contacts: "р┤╕р┤Вр┤кр┤░р╡Нр┤Хр┤Чр┤│р╡Б",
      enterMessage: "р┤╕р┤ир╡Нр┤жр╡Зр┤╢р┤В р┤Яр╡Ир┤кр╡Нр┤кр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х...",
      shareContact: "р┤╕р┤Вр┤кр┤░р╡Нр┤Хр┤╛р┤ир╡Нр┤ир┤┐ р┤кр┤Щр╡Нр┤Хр┤┐р┤Яр╡Бр┤Х",
      name: "р┤кр╡Зр┤░р╡Н",
      phone: "р┤лр╡Лр┤гр╡НтАН",
      note: "р┤Чр┤ор┤ир┤┐р┤Х (р┤Рр┤Ър╡Нр┤Ыр┤┐р┤Хр┤В)",
      post: "р┤кр╡Лр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н",
      save: "р┤╕р╡Зр┤╡р╡Н",
      stateRoom: "р┤╕р╡Нр┤▒р╡Нр┤▒р╡Зр┤▒р╡Нр┤▒р╡Н р┤▒р╡Вр┤В",
    },
  } as const;

  const t = translations[language];

  // Removed local dark mode toggle; using global top-right toggle app-wide

  // Offline detection
  useEffect(() => {
    const handleOnline = () => setIsOffline(false);
    const handleOffline = () => setIsOffline(true);
    
    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);
    
    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
    };
  }, []);

  // Enhance geolocation with permission handling, reverse geocoding (optional), and accurate weather
  const getCurrentLocation = async () => {
    try {
      setIsLocating(true);
      // @ts-ignore
      if (navigator.permissions && navigator.permissions.query) {
        // @ts-ignore
        const status = await navigator.permissions.query({ name: "geolocation" });
        if (status.state === "denied") {
          toast.error("Location permission denied. Please allow location access in browser settings.");
          // Fallback to IP-based location when permission is denied
          try {
            const resp = await fetch("https://ipapi.co/json");
            if (resp.ok) {
              const j = await resp.json();
              const pretty = [j.city, j.region].filter(Boolean).join(", ");
              setFormData((prev) => ({ ...prev, location: pretty }));
              setWeatherData(deriveWeatherFromLocation(pretty));
              toast.success("Approximate location detected from IP.");
            } else {
              toast.message("Unable to fetch approximate location.");
            }
          } catch {
            // ignore
          }
          setIsLocating(false);
          return;
        }
      }
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const { latitude, longitude } = position.coords;
            // Try reverse geocoding via Google if key exists
            let pretty = `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`;
            const key = (import.meta as any).env?.VITE_GOOGLE_MAPS_API_KEY as string | undefined;
            try {
              if (key) {
                const resp = await fetch(
                  `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${key}`,
                );
                const gj = await resp.json();
                const comp = gj?.results?.[0]?.address_components as Array<any> | undefined;
                if (comp) {
                  const city = comp.find((c) => c.types.includes("locality"))?.long_name;
                  const state = comp.find((c) => c.types.includes("administrative_area_level_1"))?.long_name;
                  if (city || state) pretty = [city, state].filter(Boolean).join(", ");
                }
              }
            } catch {
              // silent fallback to coords string
            }

            setFormData((prev) => ({ ...prev, location: pretty }));

            try {
              const w = await fetchWeather(latitude, longitude);
              setWeatherData(w);
            } catch {
              setWeatherData(deriveWeatherFromLocation(pretty));
            }
            toast.success("Location detected successfully!");
            setIsLocating(false);
          },
          async () => {
            // On error: try IP-based approximate location
            try {
              const resp = await fetch("https://ipapi.co/json");
              if (resp.ok) {
                const j = await resp.json();
                const pretty = [j.city, j.region].filter(Boolean).join(", ");
                setFormData((prev) => ({ ...prev, location: pretty }));
                setWeatherData(deriveWeatherFromLocation(pretty));
                toast.success("Approximate location detected from IP.");
              } else {
                toast.error("Unable to get location automatically. Please enter location manually.");
              }
            } catch {
              toast.error("Unable to get location automatically. Please enter location manually.");
            }
            setIsLocating(false);
          },
          { enableHighAccuracy: true, timeout: 15000, maximumAge: 0 },
        );
      } else {
        toast.error("Geolocation not supported by this browser.");
        // Fallback attempt via IP
        try {
          const resp = await fetch("https://ipapi.co/json");
          if (resp.ok) {
            const j = await resp.json();
            const pretty = [j.city, j.region].filter(Boolean).join(", ");
            setFormData((prev) => ({ ...prev, location: pretty }));
            setWeatherData(deriveWeatherFromLocation(pretty));
            toast.success("Approximate location detected from IP.");
          }
        } catch {
          // ignore
        }
        setIsLocating(false);
      }
    } catch {
      toast.error("Location access error. Please enter manually.");
      setIsLocating(false);
    }
  };

  // Speech recognition
  const startListening = () => {
    const w = window as unknown as {
      webkitSpeechRecognition?: any;
      SpeechRecognition?: any;
    };
    if ('webkitSpeechRecognition' in w || 'SpeechRecognition' in w) {
      const SpeechRecognition = w.webkitSpeechRecognition || w.SpeechRecognition;
      const recognition = new SpeechRecognition();
      
      recognition.lang = language === 'hi' ? 'hi-IN' : 'en-US';
      recognition.continuous = false;
      recognition.interimResults = false;
      
      recognition.onstart = () => {
        setIsListening(true);
        toast.info(t.listening);
      };
      
      recognition.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript as string;
        // Simple parsing for demo - in production, use NLP
        if (transcript.toLowerCase().includes('nitrogen')) {
          const match = transcript.match(/\d+/);
          if (match) {
            setFormData(prev => ({ ...prev, nitrogen: match[0] }));
          }
        }
        toast.success(`Heard: ${transcript}`);
      };
      
      recognition.onerror = () => {
        toast.error("Speech recognition error");
        setIsListening(false);
      };
      
      recognition.onend = () => {
        setIsListening(false);
      };
      
      recognition.start();
    } else {
      toast.error("Speech recognition not supported");
    }
  };

  // Text to speech
  const speakText = (text: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = language === 'hi' ? 'hi-IN' : 'en-US';
      speechSynthesis.speak(utterance);
    }
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsSubmitting(true);
    try {
      const result = await createRecommendation({
        nitrogen: parseFloat(formData.nitrogen),
        phosphorus: parseFloat(formData.phosphorus),
        potassium: parseFloat(formData.potassium),
        ph: parseFloat(formData.ph),
        soilMoisture: parseFloat(formData.soilMoisture),
        waterAvailability: parseFloat(formData.waterAvailability),
        location: formData.location,
      });

      const recs = (result as any).recommendedCrops as typeof recommendations;
      setRecommendations(recs);
      setHasRequestedRecs(true);

      if (Array.isArray(recs) && recs.length === 0) {
        toast.message("No exact matches found. Showing best-fit suggestions.");
      } else {
        toast.success("Crop recommendations generated!");
      }

      // Derive weather based on the submitted location for variability
      if (formData.location) {
        setWeatherData(deriveWeatherFromLocation(formData.location));
      }
      
    } catch (error) {
      toast.error("Failed to generate recommendations");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="w-96">
          <CardHeader>
            <CardTitle>Authentication Required</CardTitle>
            <CardDescription>Please sign in to access the crop recommendation system.</CardDescription>
          </CardHeader>
        </Card>
      </div>
    );
  }

  return (
    <div className={`min-h-screen bg-background transition-colors duration-300`}>
      {/* Header */}
      <header className="border-b bg-card/50 backdrop-blur-sm sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4 pr-56 md:pr-72">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Leaf className="h-8 w-8 text-green-600" />
              <div>
                <h1 className="text-xl font-bold tracking-tight">KisanYatra: AI Crop Recommendation System</h1>
                <p className="text-sm text-muted-foreground">{t.subtitle}</p>
              </div>
            </div>
            
            <div className="flex items-center gap-3 md:gap-4">
              {/* Add top-level Connect navigation button */}
              <Button
                variant="outline"
                onClick={() => (window.location.href = "/connect")}
                className="hidden sm:inline-flex"
                disabled={isSubmitting || isLocating}
              >
                {t.connect}
              </Button>
              {/* Language Toggle */}
              <Select value={language} onValueChange={(val) => setLanguage(val as Language)}>
                <SelectTrigger className="w-20 sm:w-24 rounded-full px-2">
                  <Globe className="h-4 w-4" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="en">EN</SelectItem>
                  <SelectItem value="hi">рд╣рд┐</SelectItem>
                  <SelectItem value="ta">TA</SelectItem>
                  <SelectItem value="bn">BN</SelectItem>
                  <SelectItem value="ur">UR</SelectItem>
                  <SelectItem value="kn">KN</SelectItem>
                  <SelectItem value="te">TE</SelectItem>
                  <SelectItem value="ml">ML</SelectItem>
                </SelectContent>
              </Select>
              
              {/* Dark mode toggle removed in favor of global toggle */}
            </div>
          </div>
        </div>
      </header>

      {/* Offline Banner */}
      {isOffline && (
        <div className="bg-orange-500 text-white px-4 py-2 text-center text-sm">
          {t.offline}
        </div>
      )}

      <div className="container mx-auto px-4 py-8 max-w-7xl">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Input Form */}
          <div className="lg:col-span-2">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Wheat className="h-5 w-5" />
                    {t.soilData}
                  </CardTitle>
                  <CardDescription>
                    Enter your soil parameters to get personalized crop recommendations
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <form onSubmit={handleSubmit} className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="nitrogen">{t.nitrogen}</Label>
                        <Input
                          id="nitrogen"
                          type="number"
                          placeholder="0-100"
                          value={formData.nitrogen}
                          onChange={(e) => setFormData(prev => ({ ...prev, nitrogen: e.target.value }))}
                          required
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="phosphorus">{t.phosphorus}</Label>
                        <Input
                          id="phosphorus"
                          type="number"
                          placeholder="0-100"
                          value={formData.phosphorus}
                          onChange={(e) => setFormData(prev => ({ ...prev, phosphorus: e.target.value }))}
                          required
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="potassium">{t.potassium}</Label>
                        <Input
                          id="potassium"
                          type="number"
                          placeholder="0-100"
                          value={formData.potassium}
                          onChange={(e) => setFormData(prev => ({ ...prev, potassium: e.target.value }))}
                          required
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="ph">{t.ph}</Label>
                        <Input
                          id="ph"
                          type="number"
                          step="0.1"
                          placeholder="0-14"
                          value={formData.ph}
                          onChange={(e) => setFormData(prev => ({ ...prev, ph: e.target.value }))}
                          required
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="soilMoisture">{t.soilMoisture}</Label>
                        <Input
                          id="soilMoisture"
                          type="number"
                          placeholder="0-100"
                          value={formData.soilMoisture}
                          onChange={(e) => setFormData(prev => ({ ...prev, soilMoisture: e.target.value }))}
                          required
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="waterAvailability">{t.waterAvailability}</Label>
                        <Input
                          id="waterAvailability"
                          type="number"
                          placeholder="0-100"
                          value={formData.waterAvailability}
                          onChange={(e) => setFormData(prev => ({ ...prev, waterAvailability: e.target.value }))}
                          required
                        />
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="location">{t.location}</Label>
                      <div className="flex gap-2">
                        <Input
                          id="location"
                          placeholder="Enter location or use GPS"
                          value={formData.location}
                          onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
                          required
                          inputMode="text"
                        />
                        <Button type="button" variant="outline" onClick={getCurrentLocation} disabled={isLocating}>
                          {isLocating ? (
                            <Loader2 className="h-4 w-4 animate-spin" />
                          ) : (
                            <MapPin className="h-4 w-4" />
                          )}
                        </Button>
                      </div>
                    </div>
                    
                    <div className="flex gap-2">
                      <Button type="submit" className="flex-1" disabled={isSubmitting}>
                        {isSubmitting ? (
                          <>
                            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                            Generating...
                          </>
                        ) : (
                          t.getRecommendation
                        )}
                      </Button>
                      <Button
                        type="button"
                        variant="outline"
                        onClick={startListening}
                        disabled={isListening || isSubmitting || isLocating}
                        aria-busy={isListening}
                      >
                        {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
                      </Button>
                    </div>
                  </form>
                </CardContent>
              </Card>
            </motion.div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Weather Card */}
            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5, delay: 0.1 }}
            >
              <WeatherCard t={t} weatherData={weatherData} />
            </motion.div>

            {/* Market Prices (formatted table, last updated: Today) */}
            <motion.div
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              <MarketPricesCard t={t as any} cropEmojis={cropEmojis} />
            </motion.div>
          </div>
        </div>

        {/* Recommendations Results */}
        {hasRequestedRecs && ((recommendations && recommendations.length > 0) || (userRecommendations && userRecommendations.length > 0)) && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            className="mt-8"
          >
            <RecommendationsList
              t={t as any}
              cropEmojis={cropEmojis}
              recommendations={recommendations}
              userRecommendations={userRecommendations}
              speakText={speakText}
              translateName={(name) => translateCropName(language, name)}
              translateFields={(name, fields) =>
                translateCropContent(language, name, fields)
              }
            />
          </motion.div>
        )}

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.35 }}
          className="mt-8"
        >
          {/* ConnectSection moved to dedicated page */}
        </motion.div>
      </div>
    </div>
  );
}